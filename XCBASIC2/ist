------- FILE /var/folders/w8/rj15q0c133ngbz1m8z28_rcr0000gn/T//xcbtmp_5FE1DC66.asm LEVEL 1 PASS 3
      1 U124a					      PROCESSOR	6502
      2 U124a					      INCDIR	"/Users/gj/git/C64/XCBASIC2/gj01"
      3  1215 ????				      SEG	UPSTART
      4  0800					      ORG	$800
      5  0800		       00		      HEX	00
      6  0801		       0b 08		      DC.W	next_line
      7  0803		       e2 07		      DC.W	2018
      8  0805		       9e		      HEX	9e
      9  0806					      IF	prg_start
     10  0806		       33 34 33 32	      DC.B	[prg_start]d
     11  080a					      ENDIF
     12  080a		       00		      HEX	00
     13  080b				   next_line
     14  080b		       00 00		      HEX	00 00
     15  080d							;------------	  --------
 Memory information:
     16  080d					      ECHO	"Memory information:"
 ===================
     17  080d					      ECHO	"==================="
 BASIC loader: $800 - $80c
     18  080d					      ECHO	"BASIC loader: $800 -", *-1
     19  080d				   library_start
     20  080d					      PROCESSOR	6502
   2434  0985					      LIST	ON
   2435  0985
   2959  0985					      LIST	ON
   3265  0acf					      LIST	ON
   3266  0acf					      PROCESSOR	6502
   3267  0acf
   3268  0acf							; STRLEN routine
   3269  0acf							; A/X - pointer to string
   3270  0acf							; Returns string length in A
   3271  0acf				   STR_STRLEN SUBROUTINE
   3272  0acf		       85 fb		      sta	R0
   3273  0ad1		       86 fc		      stx	R1
   3274  0ad3		       a0 00		      ldy	#$00
   3275  0ad5				   .loop
   3276  0ad5		       b1 fb		      lda	(R0),y
   3277  0ad7		       f0 03		      beq	.exit
   3278  0ad9		       c8		      iny
   3279  0ada		       d0 f9		      bne	.loop
   3280  0adc				   .exit
   3281  0adc		       98		      tya
   3282  0add		       60		      rts
   3283  0ade
   3284  0ade							; Opcode for STRLEN
   3285  0ade					      MAC	strlen
   3286  0ade					      pla
   3287  0ade					      tax
   3288  0ade					      pla
   3289  0ade					      jsr	STR_STRLEN
   3290  0ade					      pha
   3291  0ade					      ENDM
   3292  0ade
   3293  0ade				   STR_STRCMP SUBROUTINE
   3294  0ade							; STRCMP routine
   3295  0ade							; A/X - pointer to string1
   3296  0ade							; pointer to string2 must already be in R2/3
   3297  0ade							; Returns result in A
   3298  0ade		       85 fb		      sta	R0
   3299  0ae0		       86 fc		      stx	R1
   3300  0ae2		       a0 00		      ldy	#$00
   3301  0ae4		       38		      sec
   3302  0ae5				   .loop
   3303  0ae5		       b1 fb		      lda	(R0),y
   3304  0ae7		       f1 fd		      sbc	(R2),y
   3305  0ae9		       d0 07		      bne	.exit
   3306  0aeb		       b1 fb		      lda	(R0),y
   3307  0aed		       f0 03		      beq	.exit
   3308  0aef		       c8		      iny
   3309  0af0		       d0 f3		      bne	.loop
   3310  0af2				   .exit
   3311  0af2		       60		      rts
   3312  0af3							; Opcode for strcmp
   3313  0af3					      MAC	strcmp
   3314  0af3					      pla
   3315  0af3					      sta	R3
   3316  0af3					      pla
   3317  0af3					      sta	R2
   3318  0af3					      pla
   3319  0af3					      tax
   3320  0af3					      pla
   3321  0af3					      jsr	STR_STRCMP
   3322  0af3					      pha
   3323  0af3					      lda	#$00
   3324  0af3					      sbc	#$00
   3325  0af3					      pha
   3326  0af3					      ENDM
   3327  0af3
   3328  0af3				   STR_STRCPY SUBROUTINE
   3329  0af3							; STRCPY routine
   3330  0af3							; A/X - pointer to string1
   3331  0af3							; pointer to string2 in R2/3
   3332  0af3		       85 fb		      sta	R0
   3333  0af5		       86 fc		      stx	R1
   3334  0af7		       a0 00		      ldy	#$00
   3335  0af9				   .loop
   3336  0af9		       b1 fd		      lda	(R2),y
   3337  0afb		       91 fb		      sta	(R0),y
   3338  0afd		       f0 03		      beq	.exit
   3339  0aff		       c8		      iny
   3340  0b00		       d0 f7		      bne	.loop
   3341  0b02				   .exit
   3342  0b02		       60		      rts
   3343  0b03
   3344  0b03							; Opcode for STRCPY
   3345  0b03					      MAC	strcpy
   3346  0b03					      pla
   3347  0b03					      sta	R3
   3348  0b03					      pla
   3349  0b03					      sta	R2
   3350  0b03					      pla
   3351  0b03					      tax
   3352  0b03					      pla
   3353  0b03					      jsr	STR_STRCPY
   3354  0b03					      ENDM
   3355  0b03				   STR_STRNCPY SUBROUTINE
   3356  0b03							; STRNCPY routine
   3357  0b03							; A/X - pointer to string1
   3358  0b03							; pointer to string2 in R2/3
   3359  0b03							; Length in R4
   3360  0b03		       85 fb		      sta	R0
   3361  0b05		       86 fc		      stx	R1
   3362  0b07		       a0 00		      ldy	#$00
   3363  0b09				   .loop
   3364  0b09		       b1 fd		      lda	(R2),y
   3365  0b0b		       91 fb		      sta	(R0),y
   3366  0b0d		       f0 09		      beq	.exit
   3367  0b0f		       c8		      iny
   3368  0b10		       c4 3f		      cpy	R4
   3369  0b12		       d0 f5		      bne	.loop
   3370  0b14		       a9 00		      lda	#$00
   3371  0b16		       91 fb		      sta	(R0),y
   3372  0b18				   .exit
   3373  0b18		       60		      rts
   3374  0b19
   3375  0b19							; Opcode for strncpy
   3376  0b19					      MAC	strncpy
   3377  0b19					      pla
   3378  0b19					      sta	R4
   3379  0b19					      pla
   3380  0b19					      sta	R3
   3381  0b19					      pla
   3382  0b19					      sta	R2
   3383  0b19					      pla
   3384  0b19					      tax
   3385  0b19					      pla
   3386  0b19					      jsr	STR_STRNCPY
   3387  0b19					      ENDM
   3388  0b19							; PETSCII to screencode conversion
   3389  0b19							; By Mace
   3390  0b19				   STR_PET2SC SUBROUTINE
   3391  0b19		       c9 20		      cmp	#$20
   3392  0b1b		       90 28		      bcc	.ddRev
   3393  0b1d		       c9 60		      cmp	#$60
   3394  0b1f		       90 20		      bcc	.dd1
   3395  0b21		       c9 80		      cmp	#$80
   3396  0b23		       90 10		      bcc	.dd2
   3397  0b25		       c9 a0		      cmp	#$a0
   3398  0b27		       90 10		      bcc	.dd3
   3399  0b29		       c9 c0		      cmp	#$c0
   3400  0b2b		       90 10		      bcc	.dd4
   3401  0b2d		       c9 ff		      cmp	#$ff
   3402  0b2f		       90 14		      bcc	.ddRev
   3403  0b31		       a9 7e		      lda	#$7e
   3404  0b33		       d0 12		      bne	.ddEnd
   3405  0b35				   .dd2
   3406  0b35		       29 5f		      and	#$5f
   3407  0b37		       d0 0e		      bne	.ddEnd
   3408  0b39				   .dd3
   3409  0b39		       09 40		      ora	#$40
   3410  0b3b		       d0 0a		      bne	.ddEnd
   3411  0b3d				   .dd4
   3412  0b3d		       49 c0		      eor	#$c0
   3413  0b3f		       d0 06		      bne	.ddEnd
   3414  0b41				   .dd1
   3415  0b41		       29 3f		      and	#$3f
   3416  0b43		       10 02		      bpl	.ddEnd
   3417  0b45				   .ddRev
   3418  0b45		       49 80		      eor	#$80
   3419  0b47				   .ddEnd
   3420  0b47		       60		      rts
   3421  0b48
   3422  0b48				   STR_COPY_STRING_TO_SCREEN SUBROUTINE
   3423  0b48		       a0 00		      ldy	#$00
   3424  0b4a				   .loop
   3425  0b4a		       b1 fb		      lda	(R0),y
   3426  0b4c		       f0 09		      beq	.end
   3427  0b4e		       20 19 0b 	      jsr	STR_PET2SC
   3428  0b51		       91 fd		      sta	(R2),y
   3429  0b53		       c8		      iny
   3430  0b54		       4c 4a 0b 	      jmp	.loop
   3431  0b57				   .end
   3432  0b57		       60		      rts
   3433  0b58
   3434  0b58							; This opcode is identical to textat
   3435  0b58							; except that it translates the
   3436  0b58							; input string to screencodes
   3437  0b58					      MAC	stringat
   3438  0b58					      pla
   3439  0b58					      sta	R3
   3440  0b58					      pla
   3441  0b58					      sta	R2
   3442  0b58					      pla
   3443  0b58					      sta	R1
   3444  0b58					      pla
   3445  0b58					      sta	R0
   3446  0b58					      jsr	STR_COPY_STRING_TO_SCREEN
   3447  0b58					      ENDM
   3448  0b58
   3449  0b58				   STR_STRPOS SUBROUTINE
   3450  0b58							; A/X - pointer to haystack
   3451  0b58							; pointer to needle must already be in R2/3
   3452  0b58							; Returns result in A
   3453  0b58		       85 fb		      sta	R0
   3454  0b5a		       86 fc		      stx	R1
   3455  0b5c		       a2 00		      ldx	#$00
   3456  0b5e				   .again
   3457  0b5e		       a0 00		      ldy	#$00
   3458  0b60				   .loop
   3459  0b60		       b1 fb		      lda	(R0),y
   3460  0b62		       f0 18		      beq	.notfound
   3461  0b64		       b1 fd		      lda	(R2),y
   3462  0b66		       f0 1b		      beq	.found
   3463  0b68		       d1 fb		      cmp	(R0),y
   3464  0b6a		       d0 06		      bne	.next
   3465  0b6c		       c8		      iny
   3466  0b6d		       d0 f1		      bne	.loop
   3467  0b6f		       4c 7c 0b 	      jmp	.notfound
   3468  0b72				   .next
   3469  0b72		       e8		      inx
   3470  0b73		       e6 fb		      inc	R0
   3471  0b75		       d0 e7		      bne	.again
   3472  0b77		       e6 fc		      inc	R1
   3473  0b79		       4c 5e 0b 	      jmp	.again
   3474  0b7c				   .notfound
   3475  0b7c		       b1 fd		      lda	(R2),y
   3476  0b7e		       f0 03		      beq	.found
   3477  0b80		       a9 ff		      lda	#$ff
   3478  0b82		       60		      rts
   3479  0b83				   .found
   3480  0b83		       8a		      txa
   3481  0b84		       60		      rts
   3482  0b85
   3483  0b85							; Opcode for strpos
   3484  0b85					      MAC	strpos
   3485  0b85					      pla
   3486  0b85					      sta	R3
   3487  0b85					      pla
   3488  0b85					      sta	R2
   3489  0b85					      pla
   3490  0b85					      tax
   3491  0b85					      pla
   3492  0b85					      jsr	STR_STRPOS
   3493  0b85					      pha
   3494  0b85					      ENDM
   3495  0b85
   3496  0b85				   STR_INPUT  SUBROUTINE
   3497  0b85							; INPUT routine
   3498  0b85							; A/Y pointer to string
   3499  0b85							; R0/R1 pointer to mask
   3500  0b85							; R5 maxlength
   3501  0b85		       00 41	   .cnt       EQU	R6
   3502  0b85		       85 fd		      sta	R2
   3503  0b87		       84 fe		      sty	R3
   3504  0b89		       a9 00		      lda	#$00
   3505  0b8b		       85 cc		      sta	$cc	; turn on cursor
   3506  0b8d		       85 41		      sta	.cnt
   3507  0b8f				   .loop
   3508  0b8f		       20 e4 ff 	      jsr	KERNAL_GETIN
   3509  0b92		       f0 fb		      beq	.loop
   3510  0b94		       c9 14		      cmp	#$14
   3511  0b96		       f0 10		      beq	.delete
   3512  0b98		       c9 0d		      cmp	#$0d
   3513  0b9a		       f0 36		      beq	.end
   3514  0b9c		       a4 41		      ldy	.cnt
   3515  0b9e		       c4 40		      cpy	R5
   3516  0ba0		       f0 ed		      beq	.loop
   3517  0ba2		       20 b4 0b 	      jsr	.checkmask
   3518  0ba5		       4c 8f 0b 	      jmp	.loop
   3519  0ba8				   .delete
   3520  0ba8		       a6 41		      ldx	.cnt
   3521  0baa		       f0 e3		      beq	.loop
   3522  0bac		       c6 41		      dec	.cnt
   3523  0bae		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   3524  0bb1		       4c 8f 0b 	      jmp	.loop
   3525  0bb4				   .checkmask
   3526  0bb4		       a0 00		      ldy	#$00
   3527  0bb6				   .checkloop
   3528  0bb6		       d1 fb		      cmp	(R0),y
   3529  0bb8		       f0 0a		      beq	.ok
   3530  0bba		       c8		      iny
   3531  0bbb		       48		      pha
   3532  0bbc		       b1 fb		      lda	(R0),y
   3533  0bbe		       f0 0e		      beq	.invalid
   3534  0bc0		       68		      pla
   3535  0bc1		       4c b6 0b 	      jmp	.checkloop
   3536  0bc4				   .ok
   3537  0bc4		       a4 41		      ldy	.cnt
   3538  0bc6		       91 fd		      sta	(R2),y
   3539  0bc8		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   3540  0bcb		       e6 41		      inc	.cnt
   3541  0bcd		       60		      rts
   3542  0bce				   .invalid
   3543  0bce		       68		      pla
   3544  0bcf		       4c 8f 0b 	      jmp	.loop
   3545  0bd2				   .end
   3546  0bd2		       a4 41		      ldy	.cnt
   3547  0bd4		       a9 00		      lda	#$00
   3548  0bd6		       91 fd		      sta	(R2),y
   3549  0bd8
   3550  0bd8							; turn off cursor
   3551  0bd8		       78		      sei
   3552  0bd9		       a4 d3		      ldy	$d3	; y pos of cursor
   3553  0bdb		       a5 ce		      lda	$ce	; character under cursor
   3554  0bdd		       29 7f		      and	#%01111111
   3555  0bdf		       91 d1		      sta	($d1),y
   3556  0be1		       a9 ff		      lda	#$ff
   3557  0be3		       85 cc		      sta	$cc
   3558  0be5		       58		      cli
   3559  0be6
   3560  0be6		       60		      rts
   3561  0be7
   3562  0be7							; Opcode for input
   3563  0be7					      MAC	input
   3564  0be7							; mask address
   3565  0be7					      pla
   3566  0be7					      sta	R1
   3567  0be7					      pla
   3568  0be7					      sta	R0
   3569  0be7							; max length
   3570  0be7					      pla
   3571  0be7					      sta	R5
   3572  0be7							; destination
   3573  0be7					      pla
   3574  0be7					      tay
   3575  0be7					      pla
   3576  0be7					      jsr	STR_INPUT
   3577  0be7					      ENDM
   3578  0be7
   3579  0be7				   str_default_mask
   3580  0be7		       20 21 22 23*	      HEX	20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F
   3581  0bf7		       30 31 32 33*	      HEX	30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F
   3582  0c07		       40 41 42 43*	      HEX	40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F
   3583  0c17		       50 51 52 53*	      HEX	50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F
   3584  0c27		       a0 a1 a2 a3*	      HEX	A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF
   3585  0c37		       b0 b1 b2 b3*	      HEX	B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF
   3586  0c47		       c0 c1 c2 c3*	      HEX	C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
   3587  0c57		       d0 d1 d2 d3*	      HEX	D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF
   3588  0c67		       ff 00		      HEX	FF 00
   3589  0c69
   3590  0c69							; Numeric value of a byte
   3591  0c69							;
   3592  0c69				   STR_VALB   SUBROUTINE
   3593  0c69							; A/X: pointer to string
   3594  0c69		       00 fd	   .ret       EQU	R2
   3595  0c69		       00 fb	   .ptr       EQU	R0
   3596  0c69		       20 cf 0a 	      jsr	STR_STRLEN
   3597  0c6c		       c9 04		      cmp	#4
   3598  0c6e		       90 03		      bcc	.length_ok
   3599  0c70		       4c bb 0c 	      jmp	.invalid
   3600  0c73				   .length_ok
   3601  0c73		       a8		      tay
   3602  0c74		       88		      dey
   3603  0c75		       30 44		      bmi	.invalid
   3604  0c77		       a9 00		      lda	#$00
   3605  0c79		       85 fd		      sta	.ret
   3606  0c7b		       b1 fb		      lda	(.ptr),y
   3607  0c7d		       20 cb 0c 	      jsr	STR_CHARISNUMERIC
   3608  0c80		       90 39		      bcc	.invalid
   3609  0c82		       e9 30		      sbc	#$30
   3610  0c84		       18		      clc
   3611  0c85		       65 fd		      adc	.ret
   3612  0c87		       85 fd		      sta	.ret
   3613  0c89		       88		      dey
   3614  0c8a		       30 2c		      bmi	.end
   3615  0c8c		       b1 fb		      lda	(.ptr),y
   3616  0c8e		       20 cb 0c 	      jsr	STR_CHARISNUMERIC
   3617  0c91		       90 28		      bcc	.invalid
   3618  0c93		       e9 30		      sbc	#$30
   3619  0c95		       aa		      tax
   3620  0c96		       bd be 0c 	      lda	btens,x
   3621  0c99		       18		      clc
   3622  0c9a		       65 fd		      adc	.ret
   3623  0c9c		       85 fd		      sta	.ret
   3624  0c9e		       88		      dey
   3625  0c9f		       30 17		      bmi	.end
   3626  0ca1		       b1 fb		      lda	(.ptr),y
   3627  0ca3		       20 cb 0c 	      jsr	STR_CHARISNUMERIC
   3628  0ca6		       90 13		      bcc	.invalid
   3629  0ca8		       e9 30		      sbc	#$30
   3630  0caa		       c9 03		      cmp	#3
   3631  0cac		       b0 0d		      bcs	.invalid
   3632  0cae		       aa		      tax
   3633  0caf		       bd c8 0c 	      lda	bthous,x
   3634  0cb2		       18		      clc
   3635  0cb3		       65 fd		      adc	.ret
   3636  0cb5		       b0 04		      bcs	.invalid
   3637  0cb7		       60		      rts
   3638  0cb8				   .end
   3639  0cb8		       a5 fd		      lda	.ret
   3640  0cba		       60		      rts
   3641  0cbb				   .invalid
   3642  0cbb		       a9 00		      lda	#$00
   3643  0cbd		       60		      rts
   3644  0cbe
   3645  0cbe		       00 0a 14 1e*btens      DC.B	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
   3646  0cc8		       00 64 c8    bthous     DC.B	0, 100, 200
   3647  0ccb				   STR_CHARISNUMERIC SUBROUTINE
   3648  0ccb							; char in A
   3649  0ccb							; carry set means true
   3650  0ccb		       c9 30		      cmp	#$30
   3651  0ccd		       90 07		      bcc	.false+1
   3652  0ccf		       c9 3a		      cmp	#$3a
   3653  0cd1		       b0 02		      bcs	.false
   3654  0cd3		       38		      sec
   3655  0cd4		       60		      rts
   3656  0cd5				   .false
   3657  0cd5		       18		      clc
   3658  0cd6		       60		      rts
   3659  0cd7							; Numeric value of a signed word
   3660  0cd7				   STR_VALW   SUBROUTINE
   3661  0cd7							; A/X: pointer to string
   3662  0cd7		       00 45	   .ret       EQU	RA
   3663  0cd7		       00 43	   .ptr       EQU	R8
   3664  0cd7		       00 3f	   .neg       EQU	R4
   3665  0cd7		       00 fb	   .acc1      EQU	R0
   3666  0cd7		       00 fd	   .acc2      EQU	R2
   3667  0cd7		       85 43		      sta	.ptr
   3668  0cd9		       86 44		      stx	.ptr+1
   3669  0cdb		       a0 00		      ldy	#$00
   3670  0cdd							; reset temp regs
   3671  0cdd		       84 45		      sty	.ret
   3672  0cdf		       84 46		      sty	.ret+1
   3673  0ce1		       8c 5d 0d 	      sty	.poft
   3674  0ce4		       84 3f		      sty	.neg
   3675  0ce6							; check if negative
   3676  0ce6		       b1 43		      lda	(.ptr),y
   3677  0ce8		       c9 2d		      cmp	#$2d
   3678  0cea		       d0 0a		      bne	.positive
   3679  0cec		       a9 01		      lda	#$01
   3680  0cee		       85 3f		      sta	.neg
   3681  0cf0		       e6 43		      inc	.ptr
   3682  0cf2		       d0 02		      bne	.positive
   3683  0cf4		       e6 44		      inc	.ptr+1
   3684  0cf6				   .positive
   3685  0cf6				   .cloop
   3686  0cf6		       b1 43		      lda	(.ptr),y
   3687  0cf8		       f0 03		      beq	.exit
   3688  0cfa		       c8		      iny
   3689  0cfb		       d0 f9		      bne	.cloop
   3690  0cfd				   .exit
   3691  0cfd		       c0 07		      cpy	#7
   3692  0cff		       90 03		      bcc	.length_ok
   3693  0d01		       4c 58 0d 	      jmp	.invalid
   3694  0d04				   .length_ok
   3695  0d04				   .loop
   3696  0d04		       88		      dey
   3697  0d05		       30 35		      bmi	.end
   3698  0d07		       b1 43		      lda	(.ptr),y
   3699  0d09		       20 cb 0c 	      jsr	STR_CHARISNUMERIC
   3700  0d0c		       90 4a		      bcc	.invalid
   3701  0d0e		       e9 30		      sbc	#$30
   3702  0d10		       85 fb		      sta	.acc1
   3703  0d12		       a9 00		      lda	#$00
   3704  0d14		       85 fc		      sta	.acc1+1
   3705  0d16		       ad 5d 0d 	      lda	.poft
   3706  0d19		       aa		      tax
   3707  0d1a		       bd 5e 0d 	      lda	lwone,x
   3708  0d1d		       85 fd		      sta	.acc2
   3709  0d1f		       bd 63 0d 	      lda	hwone,x
   3710  0d22		       85 fe		      sta	.acc2+1
   3711  0d24		       20 5b 08 	      jsr	NUCL_MUL16
   3712  0d27		       18		      clc
   3713  0d28		       a5 fb		      lda	.acc1
   3714  0d2a		       65 45		      adc	.ret
   3715  0d2c		       85 45		      sta	.ret
   3716  0d2e		       a5 fc		      lda	.acc1+1
   3717  0d30		       65 46		      adc	.ret+1
   3718  0d32		       85 46		      sta	.ret+1
   3719  0d34		       30 22		      bmi	.invalid
   3720  0d36		       ee 5d 0d 	      inc	.poft
   3721  0d39		       4c 04 0d 	      jmp	.loop
   3722  0d3c
   3723  0d3c				   .end
   3724  0d3c		       a5 3f		      lda	.neg
   3725  0d3e		       f0 13		      beq	.skip
      0  0d40					      twoscomplement	RA
      1  0d40		       a5 46		      lda	RA+1
      2  0d42		       49 ff		      eor	#$ff
      3  0d44		       85 46		      sta	RA+1
      4  0d46		       a5 45		      lda	RA
      5  0d48		       49 ff		      eor	#$ff
      6  0d4a		       18		      clc
      7  0d4b		       69 01		      adc	#$01
      8  0d4d		       85 45		      sta	RA
      9  0d4f		       d0 02		      bne	.skip
     10  0d51		       e6 46		      inc	RA+1
     11  0d53				   .skip
   3727  0d53				   .skip
   3728  0d53		       a5 45		      lda	.ret
   3729  0d55		       a6 46		      ldx	.ret+1
   3730  0d57		       60		      rts
   3731  0d58				   .invalid
   3732  0d58		       a9 00		      lda	#$00
   3733  0d5a		       a2 00		      ldx	#$00
   3734  0d5c		       60		      rts
   3735  0d5d		       00	   .poft      DC.B	0
   3736  0d5e		       01	   lwone      DC.B	1
   3737  0d5f		       0a	   lwten      DC.B	10
   3738  0d60		       64	   lwhund     DC.B	100
   3739  0d61		       e8	   lwthou     DC.B	<1000
   3740  0d62		       10	   lwtthou    DC.B	<10000
   3741  0d63		       00	   hwone      DC.B	0
   3742  0d64		       00	   hwten      DC.B	0
   3743  0d65		       00	   hwhund     DC.B	0
   3744  0d66		       03	   hwthou     DC.B	>1000
   3745  0d67		       27	   hwtthou    DC.B	>10000
   3746  0d67					      MAC	valw
   3747  0d67					      pla
   3748  0d67					      tax
   3749  0d67					      pla
   3750  0d67					      jsr	STR_VALW
   3751  0d67					      pha
   3752  0d67					      txa
   3753  0d67					      pha
   3754  0d67					      ENDM
   3755  0d68
   3756  0d68					      MAC	valb
   3757  0d68					      pla
   3758  0d68					      tax
   3759  0d68					      pla
   3760  0d68					      jsr	STR_VALB
   3761  0d68					      pha
   3762  0d68					      ENDM
   3763  0d68
   3764  0d68					      MAC	valf
   3765  0d68					      basicin
   3766  0d68					      pla
   3767  0d68					      sta	$23
   3768  0d68					      tax
   3769  0d68					      pla
   3770  0d68					      sta	$22
   3771  0d68					      jsr	STR_STRLEN
   3772  0d68					      jsr	STRVAL
   3773  0d68					      pushfac
   3774  0d68					      basicout
   3775  0d68					      ENDM
   3776  0d68
 Library     : $80d - $d67
   3777  0d68					      ECHO	"Library     :",library_start,"-", *-1
   3778  0d68				   prg_start
   3779  0d68				   FPUSH      SET	0
   3780  0d68				   FPULL      SET	0
      0  0d68					      init_program
      1  0d68		       ba		      tsx
      2  0d69		       8e 85 09 	      stx	RESERVED_STACK_POINTER
      0  0d6c					      seed_rnd
      1  0d6c		       a9 80		      lda	#$80
      2  0d6e		       85 8b		      sta	ZP_RNDSEED
      3  0d70		       a5 a2		      lda	ZP_JIFFY + 2
      4  0d72		       85 8c		      sta	ZP_RNDSEED + 1
      5  0d74		       a5 a1		      lda	ZP_JIFFY + 1
      6  0d76		       85 8d		      sta	ZP_RNDSEED + 2
      7  0d78		       a5 a0		      lda	ZP_JIFFY
      8  0d7a		       85 8e		      sta	ZP_RNDSEED + 3
      0  0d7c					      basicout
      1  0d7c		       a5 01		      lda	$01
      2  0d7e		       29 fe		      and	#%11111110
      3  0d80		       85 01		      sta	$01
   3782  0d82
   3783  0d82				   _Lstart
   3784  0d82		       20 c7 0e 	      jsr	_Pcls
   3785  0d82				   FPUSH      SET	1
      0  0d85					      pbyte	#0
      1  0d85		       a9 00		      lda	#0
      2  0d87				  -	      IF	!FPUSH
      3  0d87				  -	      pha
      4  0d87					      ENDIF
   3787  0d87				   FPULL      SET	1
   3788  0d87				   FPUSH      SET	0
      0  0d87					      plb2var	_drawbar.y
      1  0d87				  -	      IF	!FPULL
      2  0d87				  -	      pla
      3  0d87					      ENDIF
      4  0d87		       8d 16 12 	      sta	_drawbar.y
   3790  0d87				   FPULL      SET	0
   3791  0d87				   FPUSH      SET	1
      0  0d8a					      paddr	_S19
      0  0d8a					      pword	_S19
      1  0d8a				  -	      IF	!FPUSH
      2  0d8a				  -	      lda	#<_S19
      3  0d8a				  -	      pha
      4  0d8a				  -	      lda	#>_S19
      5  0d8a				  -	      pha
      6  0d8a					      ELSE
      7  0d8a		       a9 ec		      lda	#<_S19
      8  0d8c		       a0 11		      ldy	#>_S19
      9  0d8e					      ENDIF
   3793  0d8e				   FPULL      SET	1
   3794  0d8e				   FPUSH      SET	0
      0  0d8e					      pls2var	_drawbar.color
      0  0d8e					      plw2var	_drawbar.color
      1  0d8e				  -	      IF	!FPULL
      2  0d8e				  -	      pla
      3  0d8e				  -	      sta	_drawbar.color+1
      4  0d8e				  -	      pla
      5  0d8e				  -	      sta	_drawbar.color
      6  0d8e					      ELSE
      7  0d8e		       8d 17 12 	      sta	_drawbar.color
      8  0d91		       8c 18 12 	      sty	_drawbar.color+1
      9  0d94					      ENDIF
   3796  0d94				   FPULL      SET	0
   3797  0d94		       20 d9 0e 	      jsr	_Pdrawbar
      0  0d97					      pbyte	#0
      1  0d97		       a9 00		      lda	#0
      2  0d99					      IF	!FPUSH
      3  0d99		       48		      pha
      4  0d9a					      ENDIF
      0  0d9a					      pbyte	#1
      1  0d9a		       a9 01		      lda	#1
      2  0d9c					      IF	!FPUSH
      3  0d9c		       48		      pha
      4  0d9d					      ENDIF
      0  0d9d					      curpos
      1  0d9d		       68		      pla
      2  0d9e		       a8		      tay
      3  0d9f		       68		      pla
      4  0da0		       aa		      tax
      5  0da1		       18		      clc
      6  0da2		       20 f0 ff 	      jsr	PLOT
      0  0da5					      paddr	_S20
      0  0da5					      pword	_S20
      1  0da5					      IF	!FPUSH
      2  0da5		       a9 ee		      lda	#<_S20
      3  0da7		       48		      pha
      4  0da8		       a9 11		      lda	#>_S20
      5  0daa		       48		      pha
      6  0dab				  -	      ELSE
      7  0dab				  -	      lda	#<_S20
      8  0dab				  -	      ldy	#>_S20
      9  0dab					      ENDIF
      0  0dab					      stdlib_putstr
      1  0dab		       68		      pla
      2  0dac		       a8		      tay
      3  0dad		       68		      pla
      4  0dae		       20 8c 09 	      jsr	STDLIB_PRINT
   3803  0db1		       a9 0d		      lda	#13
   3804  0db3		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   3805  0db3				   FPUSH      SET	1
      0  0db6					      pbyte	#10
      1  0db6		       a9 0a		      lda	#10
      2  0db8				  -	      IF	!FPUSH
      3  0db8				  -	      pha
      4  0db8					      ENDIF
   3807  0db8				   FPULL      SET	1
   3808  0db8				   FPUSH      SET	0
      0  0db8					      plb2var	_drawbox.sx
      1  0db8				  -	      IF	!FPULL
      2  0db8				  -	      pla
      3  0db8					      ENDIF
      4  0db8		       8d 1b 12 	      sta	_drawbox.sx
   3810  0db8				   FPULL      SET	0
   3811  0db8				   FPUSH      SET	1
      0  0dbb					      pbyte	#3
      1  0dbb		       a9 03		      lda	#3
      2  0dbd				  -	      IF	!FPUSH
      3  0dbd				  -	      pha
      4  0dbd					      ENDIF
   3813  0dbd				   FPULL      SET	1
   3814  0dbd				   FPUSH      SET	0
      0  0dbd					      plb2var	_drawbox.sy
      1  0dbd				  -	      IF	!FPULL
      2  0dbd				  -	      pla
      3  0dbd					      ENDIF
      4  0dbd		       8d 1c 12 	      sta	_drawbox.sy
   3816  0dbd				   FPULL      SET	0
   3817  0dbd				   FPUSH      SET	1
      0  0dc0					      pbyte	#30
      1  0dc0		       a9 1e		      lda	#30
      2  0dc2				  -	      IF	!FPUSH
      3  0dc2				  -	      pha
      4  0dc2					      ENDIF
   3819  0dc2				   FPULL      SET	1
   3820  0dc2				   FPUSH      SET	0
      0  0dc2					      plb2var	_drawbox.ex
      1  0dc2				  -	      IF	!FPULL
      2  0dc2				  -	      pla
      3  0dc2					      ENDIF
      4  0dc2		       8d 1d 12 	      sta	_drawbox.ex
   3822  0dc2				   FPULL      SET	0
   3823  0dc2				   FPUSH      SET	1
      0  0dc5					      pbyte	#10
      1  0dc5		       a9 0a		      lda	#10
      2  0dc7				  -	      IF	!FPUSH
      3  0dc7				  -	      pha
      4  0dc7					      ENDIF
   3825  0dc7				   FPULL      SET	1
   3826  0dc7				   FPUSH      SET	0
      0  0dc7					      plb2var	_drawbox.ey
      1  0dc7				  -	      IF	!FPULL
      2  0dc7				  -	      pla
      3  0dc7					      ENDIF
      4  0dc7		       8d 1e 12 	      sta	_drawbox.ey
   3828  0dc7				   FPULL      SET	0
   3829  0dc7				   FPUSH      SET	1
      0  0dca					      paddr	_S21
      0  0dca					      pword	_S21
      1  0dca				  -	      IF	!FPUSH
      2  0dca				  -	      lda	#<_S21
      3  0dca				  -	      pha
      4  0dca				  -	      lda	#>_S21
      5  0dca				  -	      pha
      6  0dca					      ELSE
      7  0dca		       a9 fc		      lda	#<_S21
      8  0dcc		       a0 11		      ldy	#>_S21
      9  0dce					      ENDIF
   3831  0dce				   FPULL      SET	1
   3832  0dce				   FPUSH      SET	0
      0  0dce					      pls2var	_drawbox.color
      0  0dce					      plw2var	_drawbox.color
      1  0dce				  -	      IF	!FPULL
      2  0dce				  -	      pla
      3  0dce				  -	      sta	_drawbox.color+1
      4  0dce				  -	      pla
      5  0dce				  -	      sta	_drawbox.color
      6  0dce					      ELSE
      7  0dce		       8d 1f 12 	      sta	_drawbox.color
      8  0dd1		       8c 20 12 	      sty	_drawbox.color+1
      9  0dd4					      ENDIF
   3834  0dd4				   FPULL      SET	0
   3835  0dd4		       20 38 0f 	      jsr	_Pdrawbox
   3836  0dd4				   FPUSH      SET	1
      0  0dd7					      pbyte	#10
      1  0dd7		       a9 0a		      lda	#10
      2  0dd9				  -	      IF	!FPUSH
      3  0dd9				  -	      pha
      4  0dd9					      ENDIF
   3838  0dd9				   FPULL      SET	1
   3839  0dd9				   FPUSH      SET	0
      0  0dd9					      plb2var	_drawrect.sx
      1  0dd9				  -	      IF	!FPULL
      2  0dd9				  -	      pla
      3  0dd9					      ENDIF
      4  0dd9		       8d 27 12 	      sta	_drawrect.sx
   3841  0dd9				   FPULL      SET	0
   3842  0dd9				   FPUSH      SET	1
      0  0ddc					      pbyte	#12
      1  0ddc		       a9 0c		      lda	#12
      2  0dde				  -	      IF	!FPUSH
      3  0dde				  -	      pha
      4  0dde					      ENDIF
   3844  0dde				   FPULL      SET	1
   3845  0dde				   FPUSH      SET	0
      0  0dde					      plb2var	_drawrect.sy
      1  0dde				  -	      IF	!FPULL
      2  0dde				  -	      pla
      3  0dde					      ENDIF
      4  0dde		       8d 28 12 	      sta	_drawrect.sy
   3847  0dde				   FPULL      SET	0
   3848  0dde				   FPUSH      SET	1
      0  0de1					      pbyte	#30
      1  0de1		       a9 1e		      lda	#30
      2  0de3				  -	      IF	!FPUSH
      3  0de3				  -	      pha
      4  0de3					      ENDIF
   3850  0de3				   FPULL      SET	1
   3851  0de3				   FPUSH      SET	0
      0  0de3					      plb2var	_drawrect.ex
      1  0de3				  -	      IF	!FPULL
      2  0de3				  -	      pla
      3  0de3					      ENDIF
      4  0de3		       8d 29 12 	      sta	_drawrect.ex
   3853  0de3				   FPULL      SET	0
   3854  0de3				   FPUSH      SET	1
      0  0de6					      pbyte	#19
      1  0de6		       a9 13		      lda	#19
      2  0de8				  -	      IF	!FPUSH
      3  0de8				  -	      pha
      4  0de8					      ENDIF
   3856  0de8				   FPULL      SET	1
   3857  0de8				   FPUSH      SET	0
      0  0de8					      plb2var	_drawrect.ey
      1  0de8				  -	      IF	!FPULL
      2  0de8				  -	      pla
      3  0de8					      ENDIF
      4  0de8		       8d 2a 12 	      sta	_drawrect.ey
   3859  0de8				   FPULL      SET	0
   3860  0de8				   FPUSH      SET	1
      0  0deb					      paddr	_S22
      0  0deb					      pword	_S22
      1  0deb				  -	      IF	!FPUSH
      2  0deb				  -	      lda	#<_S22
      3  0deb				  -	      pha
      4  0deb				  -	      lda	#>_S22
      5  0deb				  -	      pha
      6  0deb					      ELSE
      7  0deb		       a9 fe		      lda	#<_S22
      8  0ded		       a0 11		      ldy	#>_S22
      9  0def					      ENDIF
   3862  0def				   FPULL      SET	1
   3863  0def				   FPUSH      SET	0
      0  0def					      pls2var	_drawrect.color
      0  0def					      plw2var	_drawrect.color
      1  0def				  -	      IF	!FPULL
      2  0def				  -	      pla
      3  0def				  -	      sta	_drawrect.color+1
      4  0def				  -	      pla
      5  0def				  -	      sta	_drawrect.color
      6  0def					      ELSE
      7  0def		       8d 2b 12 	      sta	_drawrect.color
      8  0df2		       8c 2c 12 	      sty	_drawrect.color+1
      9  0df5					      ENDIF
   3865  0df5				   FPULL      SET	0
   3866  0df5		       20 df 0f 	      jsr	_Pdrawrect
   3867  0df5				   FPUSH      SET	1
      0  0df8					      pbyte	#11
      1  0df8		       a9 0b		      lda	#11
      2  0dfa				  -	      IF	!FPUSH
      3  0dfa				  -	      pha
      4  0dfa					      ENDIF
   3869  0dfa				   FPULL      SET	1
   3870  0dfa				   FPUSH      SET	0
      0  0dfa					      plb2var	_drawbox.sx
      1  0dfa				  -	      IF	!FPULL
      2  0dfa				  -	      pla
      3  0dfa					      ENDIF
      4  0dfa		       8d 1b 12 	      sta	_drawbox.sx
   3872  0dfa				   FPULL      SET	0
   3873  0dfa				   FPUSH      SET	1
      0  0dfd					      pbyte	#13
      1  0dfd		       a9 0d		      lda	#13
      2  0dff				  -	      IF	!FPUSH
      3  0dff				  -	      pha
      4  0dff					      ENDIF
   3875  0dff				   FPULL      SET	1
   3876  0dff				   FPUSH      SET	0
      0  0dff					      plb2var	_drawbox.sy
      1  0dff				  -	      IF	!FPULL
      2  0dff				  -	      pla
      3  0dff					      ENDIF
      4  0dff		       8d 1c 12 	      sta	_drawbox.sy
   3878  0dff				   FPULL      SET	0
   3879  0dff				   FPUSH      SET	1
      0  0e02					      pbyte	#29
      1  0e02		       a9 1d		      lda	#29
      2  0e04				  -	      IF	!FPUSH
      3  0e04				  -	      pha
      4  0e04					      ENDIF
   3881  0e04				   FPULL      SET	1
   3882  0e04				   FPUSH      SET	0
      0  0e04					      plb2var	_drawbox.ex
      1  0e04				  -	      IF	!FPULL
      2  0e04				  -	      pla
      3  0e04					      ENDIF
      4  0e04		       8d 1d 12 	      sta	_drawbox.ex
   3884  0e04				   FPULL      SET	0
   3885  0e04				   FPUSH      SET	1
      0  0e07					      pbyte	#18
      1  0e07		       a9 12		      lda	#18
      2  0e09				  -	      IF	!FPUSH
      3  0e09				  -	      pha
      4  0e09					      ENDIF
   3887  0e09				   FPULL      SET	1
   3888  0e09				   FPUSH      SET	0
      0  0e09					      plb2var	_drawbox.ey
      1  0e09				  -	      IF	!FPULL
      2  0e09				  -	      pla
      3  0e09					      ENDIF
      4  0e09		       8d 1e 12 	      sta	_drawbox.ey
   3890  0e09				   FPULL      SET	0
   3891  0e09				   FPUSH      SET	1
      0  0e0c					      paddr	_S23
      0  0e0c					      pword	_S23
      1  0e0c				  -	      IF	!FPUSH
      2  0e0c				  -	      lda	#<_S23
      3  0e0c				  -	      pha
      4  0e0c				  -	      lda	#>_S23
      5  0e0c				  -	      pha
      6  0e0c					      ELSE
      7  0e0c		       a9 00		      lda	#<_S23
      8  0e0e		       a0 12		      ldy	#>_S23
      9  0e10					      ENDIF
   3893  0e10				   FPULL      SET	1
   3894  0e10				   FPUSH      SET	0
      0  0e10					      pls2var	_drawbox.color
      0  0e10					      plw2var	_drawbox.color
      1  0e10				  -	      IF	!FPULL
      2  0e10				  -	      pla
      3  0e10				  -	      sta	_drawbox.color+1
      4  0e10				  -	      pla
      5  0e10				  -	      sta	_drawbox.color
      6  0e10					      ELSE
      7  0e10		       8d 1f 12 	      sta	_drawbox.color
      8  0e13		       8c 20 12 	      sty	_drawbox.color+1
      9  0e16					      ENDIF
   3896  0e16				   FPULL      SET	0
   3897  0e16		       20 38 0f 	      jsr	_Pdrawbox
      0  0e19					      paddr	_S24
      0  0e19					      pword	_S24
      1  0e19					      IF	!FPUSH
      2  0e19		       a9 02		      lda	#<_S24
      3  0e1b		       48		      pha
      4  0e1c		       a9 12		      lda	#>_S24
      5  0e1e		       48		      pha
      6  0e1f				  -	      ELSE
      7  0e1f				  -	      lda	#<_S24
      8  0e1f				  -	      ldy	#>_S24
      9  0e1f					      ENDIF
      0  0e1f					      stdlib_putstr
      1  0e1f		       68		      pla
      2  0e20		       a8		      tay
      3  0e21		       68		      pla
      4  0e22		       20 8c 09 	      jsr	STDLIB_PRINT
      0  0e25					      pbyte	#20
      1  0e25		       a9 14		      lda	#20
      2  0e27					      IF	!FPUSH
      3  0e27		       48		      pha
      4  0e28					      ENDIF
      0  0e28					      pbyte	#0
      1  0e28		       a9 00		      lda	#0
      2  0e2a					      IF	!FPUSH
      3  0e2a		       48		      pha
      4  0e2b					      ENDIF
      0  0e2b					      curpos
      1  0e2b		       68		      pla
      2  0e2c		       a8		      tay
      3  0e2d		       68		      pla
      4  0e2e		       aa		      tax
      5  0e2f		       18		      clc
      6  0e30		       20 f0 ff 	      jsr	PLOT
   3903  0e33		       20 1e 11 	      jsr	_Pget_key
      0  0e36					      halt
      0  0e36					      basicin
      1  0e36		       a5 01		      lda	$01
      2  0e38		       09 01		      ora	#%00000001
      3  0e3a		       85 01		      sta	$01
      2  0e3c		       ae 85 09 	      ldx	RESERVED_STACK_POINTER
      3  0e3f		       9a		      txs
      4  0e40		       60		      rts
   3905  0e41				   _Lmenu
   3906  0e41				   FPUSH      SET	1
      0  0e41					      paddr	_buff
      0  0e41					      pword	_buff
      1  0e41				  -	      IF	!FPUSH
      2  0e41				  -	      lda	#<_buff
      3  0e41				  -	      pha
      4  0e41				  -	      lda	#>_buff
      5  0e41				  -	      pha
      6  0e41					      ELSE
      7  0e41		       a9 35		      lda	#<_buff
      8  0e43		       a0 12		      ldy	#>_buff
      9  0e45					      ENDIF
   3908  0e45				   FPULL      SET	1
   3909  0e45				   FPUSH      SET	0
      0  0e45					      plw2var	_name
      1  0e45				  -	      IF	!FPULL
      2  0e45				  -	      pla
      3  0e45				  -	      sta	_name+1
      4  0e45				  -	      pla
      5  0e45				  -	      sta	_name
      6  0e45					      ELSE
      7  0e45		       8d 4a 12 	      sta	_name
      8  0e48		       8c 4b 12 	      sty	_name+1
      9  0e4b					      ENDIF
   3911  0e4b				   FPULL      SET	0
      0  0e4b					      paddr	_S25
      0  0e4b					      pword	_S25
      1  0e4b					      IF	!FPUSH
      2  0e4b		       a9 04		      lda	#<_S25
      3  0e4d		       48		      pha
      4  0e4e		       a9 12		      lda	#>_S25
      5  0e50		       48		      pha
      6  0e51				  -	      ELSE
      7  0e51				  -	      lda	#<_S25
      8  0e51				  -	      ldy	#>_S25
      9  0e51					      ENDIF
      0  0e51					      stdlib_putstr
      1  0e51		       68		      pla
      2  0e52		       a8		      tay
      3  0e53		       68		      pla
      4  0e54		       20 8c 09 	      jsr	STDLIB_PRINT
   3914  0e57		       a9 0d		      lda	#13
   3915  0e59		       20 16 e7 	      jsr	KERNAL_PRINTCHR
      0  0e5c					      paddr	_S26
      0  0e5c					      pword	_S26
      1  0e5c					      IF	!FPUSH
      2  0e5c		       a9 09		      lda	#<_S26
      3  0e5e		       48		      pha
      4  0e5f		       a9 12		      lda	#>_S26
      5  0e61		       48		      pha
      6  0e62				  -	      ELSE
      7  0e62				  -	      lda	#<_S26
      8  0e62				  -	      ldy	#>_S26
      9  0e62					      ENDIF
      0  0e62					      stdlib_putstr
      1  0e62		       68		      pla
      2  0e63		       a8		      tay
      3  0e64		       68		      pla
      4  0e65		       20 8c 09 	      jsr	STDLIB_PRINT
   3918  0e68		       a9 0d		      lda	#13
   3919  0e6a		       20 16 e7 	      jsr	KERNAL_PRINTCHR
      0  0e6d					      paddr	_S27
      0  0e6d					      pword	_S27
      1  0e6d					      IF	!FPUSH
      2  0e6d		       a9 0e		      lda	#<_S27
      3  0e6f		       48		      pha
      4  0e70		       a9 12		      lda	#>_S27
      5  0e72		       48		      pha
      6  0e73				  -	      ELSE
      7  0e73				  -	      lda	#<_S27
      8  0e73				  -	      ldy	#>_S27
      9  0e73					      ENDIF
      0  0e73					      stdlib_putstr
      1  0e73		       68		      pla
      2  0e74		       a8		      tay
      3  0e75		       68		      pla
      4  0e76		       20 8c 09 	      jsr	STDLIB_PRINT
   3922  0e79		       a9 0d		      lda	#13
   3923  0e7b		       20 16 e7 	      jsr	KERNAL_PRINTCHR
      0  0e7e					      pwvar	_name
      1  0e7e					      IF	!FPUSH
      2  0e7e		       ad 4a 12 	      lda	_name
      3  0e81		       48		      pha
      4  0e82		       ad 4b 12 	      lda	_name+1
      5  0e85		       48		      pha
      6  0e86				  -	      ELSE
      7  0e86				  -	      lda	_name
      8  0e86				  -	      ldy	_name+1
      9  0e86					      ENDIF
      0  0e86					      pbyte	#20
      1  0e86		       a9 14		      lda	#20
      2  0e88					      IF	!FPUSH
      3  0e88		       48		      pha
      4  0e89					      ENDIF
      0  0e89					      paddr	str_default_mask
      0  0e89					      pword	str_default_mask
      1  0e89					      IF	!FPUSH
      2  0e89		       a9 e7		      lda	#<str_default_mask
      3  0e8b		       48		      pha
      4  0e8c		       a9 0b		      lda	#>str_default_mask
      5  0e8e		       48		      pha
      6  0e8f				  -	      ELSE
      7  0e8f				  -	      lda	#<str_default_mask
      8  0e8f				  -	      ldy	#>str_default_mask
      9  0e8f					      ENDIF
      0  0e8f					      input
      1  0e8f
      2  0e8f		       68		      pla
      3  0e90		       85 fc		      sta	R1
      4  0e92		       68		      pla
      5  0e93		       85 fb		      sta	R0
      6  0e95
      7  0e95		       68		      pla
      8  0e96		       85 40		      sta	R5
      9  0e98
     10  0e98		       68		      pla
     11  0e99		       a8		      tay
     12  0e9a		       68		      pla
     13  0e9b		       20 85 0b 	      jsr	STR_INPUT
      0  0e9e					      psvar	_name
      0  0e9e					      pwvar	_name
      1  0e9e					      IF	!FPUSH
      2  0e9e		       ad 4a 12 	      lda	_name
      3  0ea1		       48		      pha
      4  0ea2		       ad 4b 12 	      lda	_name+1
      5  0ea5		       48		      pha
      6  0ea6				  -	      ELSE
      7  0ea6				  -	      lda	_name
      8  0ea6				  -	      ldy	_name+1
      9  0ea6					      ENDIF
      0  0ea6					      stdlib_putstr
      1  0ea6		       68		      pla
      2  0ea7		       a8		      tay
      3  0ea8		       68		      pla
      4  0ea9		       20 8c 09 	      jsr	STDLIB_PRINT
   3930  0eac		       a9 0d		      lda	#13
   3931  0eae		       20 16 e7 	      jsr	KERNAL_PRINTCHR
      0  0eb1					      halt
      0  0eb1					      basicin
      1  0eb1		       a5 01		      lda	$01
      2  0eb3		       09 01		      ora	#%00000001
      3  0eb5		       85 01		      sta	$01
      2  0eb7		       ae 85 09 	      ldx	RESERVED_STACK_POINTER
      3  0eba		       9a		      txs
      4  0ebb		       60		      rts
   3933  0ebc				   prg_end
      0  0ebc					      halt
      0  0ebc					      basicin
      1  0ebc		       a5 01		      lda	$01
      2  0ebe		       09 01		      ora	#%00000001
      3  0ec0		       85 01		      sta	$01
      2  0ec2		       ae 85 09 	      ldx	RESERVED_STACK_POINTER
      3  0ec5		       9a		      txs
      4  0ec6		       60		      rts
   3935  0ec7
   3936  0ec7				   _Pcls      SUBROUTINE
      0  0ec7					      paddr	_S1
      0  0ec7					      pword	_S1
      1  0ec7					      IF	!FPUSH
      2  0ec7		       a9 b2		      lda	#<_S1
      3  0ec9		       48		      pha
      4  0eca		       a9 11		      lda	#>_S1
      5  0ecc		       48		      pha
      6  0ecd				  -	      ELSE
      7  0ecd				  -	      lda	#<_S1
      8  0ecd				  -	      ldy	#>_S1
      9  0ecd					      ENDIF
      0  0ecd					      stdlib_putstr
      1  0ecd		       68		      pla
      2  0ece		       a8		      tay
      3  0ecf		       68		      pla
      4  0ed0		       20 8c 09 	      jsr	STDLIB_PRINT
   3939  0ed3		       a9 0d		      lda	#13
   3940  0ed5		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   3941  0ed8		       60		      rts
   3942  0ed9				   _Pcls_end
   3943  0ed9
   3944  0ed9				   _Pdrawbar  SUBROUTINE
      0  0ed9					      pbvar	_drawbar.y
      0  0ed9					      pbyte	_drawbar.y
      1  0ed9		       ad 16 12 	      lda	_drawbar.y
      2  0edc					      IF	!FPUSH
      3  0edc		       48		      pha
      4  0edd					      ENDIF
      0  0edd					      pbyte	#0
      1  0edd		       a9 00		      lda	#0
      2  0edf					      IF	!FPUSH
      3  0edf		       48		      pha
      4  0ee0					      ENDIF
      0  0ee0					      curpos
      1  0ee0		       68		      pla
      2  0ee1		       a8		      tay
      3  0ee2		       68		      pla
      4  0ee3		       aa		      tax
      5  0ee4		       18		      clc
      6  0ee5		       20 f0 ff 	      jsr	PLOT
      0  0ee8					      psvar	_drawbar.color
      0  0ee8					      pwvar	_drawbar.color
      1  0ee8					      IF	!FPUSH
      2  0ee8		       ad 17 12 	      lda	_drawbar.color
      3  0eeb		       48		      pha
      4  0eec		       ad 18 12 	      lda	_drawbar.color+1
      5  0eef		       48		      pha
      6  0ef0				  -	      ELSE
      7  0ef0				  -	      lda	_drawbar.color
      8  0ef0				  -	      ldy	_drawbar.color+1
      9  0ef0					      ENDIF
      0  0ef0					      stdlib_putstr
      1  0ef0		       68		      pla
      2  0ef1		       a8		      tay
      3  0ef2		       68		      pla
      4  0ef3		       20 8c 09 	      jsr	STDLIB_PRINT
      0  0ef6					      paddr	_S2
      0  0ef6					      pword	_S2
      1  0ef6					      IF	!FPUSH
      2  0ef6		       a9 b5		      lda	#<_S2
      3  0ef8		       48		      pha
      4  0ef9		       a9 11		      lda	#>_S2
      5  0efb		       48		      pha
      6  0efc				  -	      ELSE
      7  0efc				  -	      lda	#<_S2
      8  0efc				  -	      ldy	#>_S2
      9  0efc					      ENDIF
      0  0efc					      stdlib_putstr
      1  0efc		       68		      pla
      2  0efd		       a8		      tay
      3  0efe		       68		      pla
      4  0eff		       20 8c 09 	      jsr	STDLIB_PRINT
   3952  0eff				   FPUSH      SET	1
      0  0f02					      pbyte	#0
      1  0f02		       a9 00		      lda	#0
      2  0f04				  -	      IF	!FPUSH
      3  0f04				  -	      pha
      4  0f04					      ENDIF
   3954  0f04				   FPULL      SET	1
   3955  0f04				   FPUSH      SET	0
      0  0f04					      plb2var	_drawbar.i
      1  0f04				  -	      IF	!FPULL
      2  0f04				  -	      pla
      3  0f04					      ENDIF
      4  0f04		       8d 19 12 	      sta	_drawbar.i
   3957  0f04				   FPULL      SET	0
   3958  0f04				   FPUSH      SET	1
      0  0f07					      pbyte	#39
      1  0f07		       a9 27		      lda	#39
      2  0f09				  -	      IF	!FPUSH
      3  0f09				  -	      pha
      4  0f09					      ENDIF
   3960  0f09				   FPULL      SET	1
   3961  0f09				   FPUSH      SET	0
      0  0f09					      plb2var	XFOR_max_1
      1  0f09				  -	      IF	!FPULL
      2  0f09				  -	      pla
      3  0f09					      ENDIF
      4  0f09		       8d 1a 12 	      sta	XFOR_max_1
   3963  0f0c				   _FOR_1
   3964  0f0c				   FPULL      SET	0
      0  0f0c					      forb	1, _drawbar.i
      1  0f0c
      2  0f0c		       ad 1a 12 	      lda	XFOR_max_1
      3  0f0f		       cd 19 12 	      cmp	_drawbar.i
      4  0f12		       b0 03		      bcs	.enter
      5  0f14
      6  0f14		       4c 2b 0f 	      jmp	_ENDFOR_1
      7  0f17				   .enter
      0  0f17					      paddr	_S3
      0  0f17					      pword	_S3
      1  0f17					      IF	!FPUSH
      2  0f17		       a9 b7		      lda	#<_S3
      3  0f19		       48		      pha
      4  0f1a		       a9 11		      lda	#>_S3
      5  0f1c		       48		      pha
      6  0f1d				  -	      ELSE
      7  0f1d				  -	      lda	#<_S3
      8  0f1d				  -	      ldy	#>_S3
      9  0f1d					      ENDIF
      0  0f1d					      stdlib_putstr
      1  0f1d		       68		      pla
      2  0f1e		       a8		      tay
      3  0f1f		       68		      pla
      4  0f20		       20 8c 09 	      jsr	STDLIB_PRINT
      0  0f23					      nextb	1, _drawbar.i
      1  0f23
      2  0f23				  -	      IFCONST	XFOR_step_1
      3  0f23				  -
      4  0f23				  -	      clc
      5  0f23				  -	      lda	XFOR_step_1
      6  0f23				  -	      adc	_drawbar.i
      7  0f23				  -	      sta	_drawbar.i
      8  0f23				  -
      9  0f23				  -	      bcs	_ENDFOR_1
     10  0f23					      ELSE
     11  0f23
     12  0f23		       ee 19 12 	      inc	_drawbar.i
     13  0f26
     14  0f26		       f0 03		      beq	_ENDFOR_1
     15  0f28					      ENDIF
     16  0f28		       4c 0c 0f 	      jmp	_FOR_1
   3969  0f2b				   _ENDFOR_1
      0  0f2b					      paddr	_S4
      0  0f2b					      pword	_S4
      1  0f2b					      IF	!FPUSH
      2  0f2b		       a9 b9		      lda	#<_S4
      3  0f2d		       48		      pha
      4  0f2e		       a9 11		      lda	#>_S4
      5  0f30		       48		      pha
      6  0f31				  -	      ELSE
      7  0f31				  -	      lda	#<_S4
      8  0f31				  -	      ldy	#>_S4
      9  0f31					      ENDIF
      0  0f31					      stdlib_putstr
      1  0f31		       68		      pla
      2  0f32		       a8		      tay
      3  0f33		       68		      pla
      4  0f34		       20 8c 09 	      jsr	STDLIB_PRINT
   3972  0f37		       60		      rts
   3973  0f38				   _Pdrawbar_end
   3974  0f38
   3975  0f38				   _Pdrawbox  SUBROUTINE
      0  0f38					      pbvar	_drawbox.sy
      0  0f38					      pbyte	_drawbox.sy
      1  0f38		       ad 1c 12 	      lda	_drawbox.sy
      2  0f3b					      IF	!FPUSH
      3  0f3b		       48		      pha
      4  0f3c					      ENDIF
      0  0f3c					      pbvar	_drawbox.sx
      0  0f3c					      pbyte	_drawbox.sx
      1  0f3c		       ad 1b 12 	      lda	_drawbox.sx
      2  0f3f					      IF	!FPUSH
      3  0f3f		       48		      pha
      4  0f40					      ENDIF
      0  0f40					      curpos
      1  0f40		       68		      pla
      2  0f41		       a8		      tay
      3  0f42		       68		      pla
      4  0f43		       aa		      tax
      5  0f44		       18		      clc
      6  0f45		       20 f0 ff 	      jsr	PLOT
      0  0f48					      psvar	_drawbox.color
      0  0f48					      pwvar	_drawbox.color
      1  0f48					      IF	!FPUSH
      2  0f48		       ad 1f 12 	      lda	_drawbox.color
      3  0f4b		       48		      pha
      4  0f4c		       ad 20 12 	      lda	_drawbox.color+1
      5  0f4f		       48		      pha
      6  0f50				  -	      ELSE
      7  0f50				  -	      lda	_drawbox.color
      8  0f50				  -	      ldy	_drawbox.color+1
      9  0f50					      ENDIF
      0  0f50					      stdlib_putstr
      1  0f50		       68		      pla
      2  0f51		       a8		      tay
      3  0f52		       68		      pla
      4  0f53		       20 8c 09 	      jsr	STDLIB_PRINT
      0  0f56					      paddr	_S5
      0  0f56					      pword	_S5
      1  0f56					      IF	!FPUSH
      2  0f56		       a9 bb		      lda	#<_S5
      3  0f58		       48		      pha
      4  0f59		       a9 11		      lda	#>_S5
      5  0f5b		       48		      pha
      6  0f5c				  -	      ELSE
      7  0f5c				  -	      lda	#<_S5
      8  0f5c				  -	      ldy	#>_S5
      9  0f5c					      ENDIF
      0  0f5c					      stdlib_putstr
      1  0f5c		       68		      pla
      2  0f5d		       a8		      tay
      3  0f5e		       68		      pla
      4  0f5f		       20 8c 09 	      jsr	STDLIB_PRINT
   3983  0f5f				   FPUSH      SET	1
      0  0f62					      opt_pbyte_pbyte_sub	_drawbox.ex, _drawbox.sx
      1  0f62
      2  0f62
      3  0f62
      4  0f62
      5  0f62
      6  0f62		       ad 1d 12 	      lda	_drawbox.ex
      7  0f65		       38		      sec
      8  0f66		       ed 1b 12 	      sbc	_drawbox.sx
      9  0f69				  -	      IF	!FPUSH
     10  0f69				  -	      pha
     11  0f69					      ENDIF
   3985  0f69				   FPULL      SET	1
   3986  0f69				   FPUSH      SET	0
      0  0f69					      plb2var	_drawbox.w
      1  0f69				  -	      IF	!FPULL
      2  0f69				  -	      pla
      3  0f69					      ENDIF
      4  0f69		       8d 21 12 	      sta	_drawbox.w
   3988  0f69				   FPULL      SET	0
   3989  0f69				   FPUSH      SET	1
      0  0f6c					      opt_pbyte_pbyte_sub	_drawbox.ey, _drawbox.sy
      1  0f6c
      2  0f6c
      3  0f6c
      4  0f6c
      5  0f6c
      6  0f6c		       ad 1e 12 	      lda	_drawbox.ey
      7  0f6f		       38		      sec
      8  0f70		       ed 1c 12 	      sbc	_drawbox.sy
      9  0f73				  -	      IF	!FPUSH
     10  0f73				  -	      pha
     11  0f73					      ENDIF
   3991  0f73				   FPULL      SET	1
   3992  0f73				   FPUSH      SET	0
      0  0f73					      plb2var	_drawbox.h
      1  0f73				  -	      IF	!FPULL
      2  0f73				  -	      pla
      3  0f73					      ENDIF
      4  0f73		       8d 22 12 	      sta	_drawbox.h
   3994  0f73				   FPULL      SET	0
   3995  0f73				   FPUSH      SET	1
      0  0f76					      pbyte	#1
      1  0f76		       a9 01		      lda	#1
      2  0f78				  -	      IF	!FPUSH
      3  0f78				  -	      pha
      4  0f78					      ENDIF
   3997  0f78				   FPULL      SET	1
   3998  0f78				   FPUSH      SET	0
      0  0f78					      plb2var	_drawbox.r
      1  0f78				  -	      IF	!FPULL
      2  0f78				  -	      pla
      3  0f78					      ENDIF
      4  0f78		       8d 23 12 	      sta	_drawbox.r
   4000  0f78				   FPULL      SET	0
   4001  0f78				   FPUSH      SET	1
      0  0f7b					      pbvar	_drawbox.h
      0  0f7b					      pbyte	_drawbox.h
      1  0f7b		       ad 22 12 	      lda	_drawbox.h
      2  0f7e				  -	      IF	!FPUSH
      3  0f7e				  -	      pha
      4  0f7e					      ENDIF
   4003  0f7e				   FPULL      SET	1
   4004  0f7e				   FPUSH      SET	0
      0  0f7e					      plb2var	XFOR_max_2
      1  0f7e				  -	      IF	!FPULL
      2  0f7e				  -	      pla
      3  0f7e					      ENDIF
      4  0f7e		       8d 24 12 	      sta	XFOR_max_2
   4006  0f81				   _FOR_2
   4007  0f81				   FPULL      SET	0
      0  0f81					      forb	2, _drawbox.r
      1  0f81
      2  0f81		       ad 24 12 	      lda	XFOR_max_2
      3  0f84		       cd 23 12 	      cmp	_drawbox.r
      4  0f87		       b0 03		      bcs	.enter
      5  0f89
      6  0f89		       4c d2 0f 	      jmp	_ENDFOR_2
      7  0f8c				   .enter
   4009  0f8c				   FPUSH      SET	1
      0  0f8c					      pbyte	#1
      1  0f8c		       a9 01		      lda	#1
      2  0f8e				  -	      IF	!FPUSH
      3  0f8e				  -	      pha
      4  0f8e					      ENDIF
   4011  0f8e				   FPULL      SET	1
   4012  0f8e				   FPUSH      SET	0
      0  0f8e					      plb2var	_drawbox.c
      1  0f8e				  -	      IF	!FPULL
      2  0f8e				  -	      pla
      3  0f8e					      ENDIF
      4  0f8e		       8d 25 12 	      sta	_drawbox.c
   4014  0f8e				   FPULL      SET	0
   4015  0f8e				   FPUSH      SET	1
      0  0f91					      pbvar	_drawbox.w
      0  0f91					      pbyte	_drawbox.w
      1  0f91		       ad 21 12 	      lda	_drawbox.w
      2  0f94				  -	      IF	!FPUSH
      3  0f94				  -	      pha
      4  0f94					      ENDIF
   4017  0f94				   FPULL      SET	1
   4018  0f94				   FPUSH      SET	0
      0  0f94					      plb2var	XFOR_max_3
      1  0f94				  -	      IF	!FPULL
      2  0f94				  -	      pla
      3  0f94					      ENDIF
      4  0f94		       8d 26 12 	      sta	XFOR_max_3
   4020  0f97				   _FOR_3
   4021  0f97				   FPULL      SET	0
      0  0f97					      forb	3, _drawbox.c
      1  0f97
      2  0f97		       ad 26 12 	      lda	XFOR_max_3
      3  0f9a		       cd 25 12 	      cmp	_drawbox.c
      4  0f9d		       b0 03		      bcs	.enter
      5  0f9f
      6  0f9f		       4c b6 0f 	      jmp	_ENDFOR_3
      7  0fa2				   .enter
      0  0fa2					      paddr	_S6
      0  0fa2					      pword	_S6
      1  0fa2					      IF	!FPUSH
      2  0fa2		       a9 bd		      lda	#<_S6
      3  0fa4		       48		      pha
      4  0fa5		       a9 11		      lda	#>_S6
      5  0fa7		       48		      pha
      6  0fa8				  -	      ELSE
      7  0fa8				  -	      lda	#<_S6
      8  0fa8				  -	      ldy	#>_S6
      9  0fa8					      ENDIF
      0  0fa8					      stdlib_putstr
      1  0fa8		       68		      pla
      2  0fa9		       a8		      tay
      3  0faa		       68		      pla
      4  0fab		       20 8c 09 	      jsr	STDLIB_PRINT
      0  0fae					      nextb	3, _drawbox.c
      1  0fae
      2  0fae				  -	      IFCONST	XFOR_step_3
      3  0fae				  -
      4  0fae				  -	      clc
      5  0fae				  -	      lda	XFOR_step_3
      6  0fae				  -	      adc	_drawbox.c
      7  0fae				  -	      sta	_drawbox.c
      8  0fae				  -
      9  0fae				  -	      bcs	_ENDFOR_3
     10  0fae					      ELSE
     11  0fae
     12  0fae		       ee 25 12 	      inc	_drawbox.c
     13  0fb1
     14  0fb1		       f0 03		      beq	_ENDFOR_3
     15  0fb3					      ENDIF
     16  0fb3		       4c 97 0f 	      jmp	_FOR_3
   4026  0fb6				   _ENDFOR_3
      0  0fb6					      opt_pbyte_pbyte_add	_drawbox.sy, _drawbox.r
      1  0fb6
      2  0fb6
      3  0fb6
      4  0fb6
      5  0fb6
      6  0fb6		       ad 1c 12 	      lda	_drawbox.sy
      7  0fb9		       18		      clc
      8  0fba		       6d 23 12 	      adc	_drawbox.r
      9  0fbd					      IF	!FPUSH
     10  0fbd		       48		      pha
     11  0fbe					      ENDIF
      0  0fbe					      pbvar	_drawbox.sx
      0  0fbe					      pbyte	_drawbox.sx
      1  0fbe		       ad 1b 12 	      lda	_drawbox.sx
      2  0fc1					      IF	!FPUSH
      3  0fc1		       48		      pha
      4  0fc2					      ENDIF
      0  0fc2					      curpos
      1  0fc2		       68		      pla
      2  0fc3		       a8		      tay
      3  0fc4		       68		      pla
      4  0fc5		       aa		      tax
      5  0fc6		       18		      clc
      6  0fc7		       20 f0 ff 	      jsr	PLOT
      0  0fca					      nextb	2, _drawbox.r
      1  0fca
      2  0fca				  -	      IFCONST	XFOR_step_2
      3  0fca				  -
      4  0fca				  -	      clc
      5  0fca				  -	      lda	XFOR_step_2
      6  0fca				  -	      adc	_drawbox.r
      7  0fca				  -	      sta	_drawbox.r
      8  0fca				  -
      9  0fca				  -	      bcs	_ENDFOR_2
     10  0fca					      ELSE
     11  0fca
     12  0fca		       ee 23 12 	      inc	_drawbox.r
     13  0fcd
     14  0fcd		       f0 03		      beq	_ENDFOR_2
     15  0fcf					      ENDIF
     16  0fcf		       4c 81 0f 	      jmp	_FOR_2
   4031  0fd2				   _ENDFOR_2
      0  0fd2					      paddr	_S7
      0  0fd2					      pword	_S7
      1  0fd2					      IF	!FPUSH
      2  0fd2		       a9 bf		      lda	#<_S7
      3  0fd4		       48		      pha
      4  0fd5		       a9 11		      lda	#>_S7
      5  0fd7		       48		      pha
      6  0fd8				  -	      ELSE
      7  0fd8				  -	      lda	#<_S7
      8  0fd8				  -	      ldy	#>_S7
      9  0fd8					      ENDIF
      0  0fd8					      stdlib_putstr
      1  0fd8		       68		      pla
      2  0fd9		       a8		      tay
      3  0fda		       68		      pla
      4  0fdb		       20 8c 09 	      jsr	STDLIB_PRINT
   4034  0fde		       60		      rts
   4035  0fdf				   _Pdrawbox_end
   4036  0fdf
   4037  0fdf				   _Pdrawrect SUBROUTINE
      0  0fdf					      pbvar	_drawrect.sy
      0  0fdf					      pbyte	_drawrect.sy
      1  0fdf		       ad 28 12 	      lda	_drawrect.sy
      2  0fe2					      IF	!FPUSH
      3  0fe2		       48		      pha
      4  0fe3					      ENDIF
      0  0fe3					      pbvar	_drawrect.sx
      0  0fe3					      pbyte	_drawrect.sx
      1  0fe3		       ad 27 12 	      lda	_drawrect.sx
      2  0fe6					      IF	!FPUSH
      3  0fe6		       48		      pha
      4  0fe7					      ENDIF
      0  0fe7					      curpos
      1  0fe7		       68		      pla
      2  0fe8		       a8		      tay
      3  0fe9		       68		      pla
      4  0fea		       aa		      tax
      5  0feb		       18		      clc
      6  0fec		       20 f0 ff 	      jsr	PLOT
      0  0fef					      psvar	_drawrect.color
      0  0fef					      pwvar	_drawrect.color
      1  0fef					      IF	!FPUSH
      2  0fef		       ad 2b 12 	      lda	_drawrect.color
      3  0ff2		       48		      pha
      4  0ff3		       ad 2c 12 	      lda	_drawrect.color+1
      5  0ff6		       48		      pha
      6  0ff7				  -	      ELSE
      7  0ff7				  -	      lda	_drawrect.color
      8  0ff7				  -	      ldy	_drawrect.color+1
      9  0ff7					      ENDIF
      0  0ff7					      stdlib_putstr
      1  0ff7		       68		      pla
      2  0ff8		       a8		      tay
      3  0ff9		       68		      pla
      4  0ffa		       20 8c 09 	      jsr	STDLIB_PRINT
      0  0ffd					      paddr	_S8
      0  0ffd					      pword	_S8
      1  0ffd					      IF	!FPUSH
      2  0ffd		       a9 c1		      lda	#<_S8
      3  0fff		       48		      pha
      4  1000		       a9 11		      lda	#>_S8
      5  1002		       48		      pha
      6  1003				  -	      ELSE
      7  1003				  -	      lda	#<_S8
      8  1003				  -	      ldy	#>_S8
      9  1003					      ENDIF
      0  1003					      stdlib_putstr
      1  1003		       68		      pla
      2  1004		       a8		      tay
      3  1005		       68		      pla
      4  1006		       20 8c 09 	      jsr	STDLIB_PRINT
   4045  1006				   FPUSH      SET	1
      0  1009					      opt_pbyte_pbyte_sub	_drawrect.ex, _drawrect.sx
      1  1009
      2  1009
      3  1009
      4  1009
      5  1009
      6  1009		       ad 29 12 	      lda	_drawrect.ex
      7  100c		       38		      sec
      8  100d		       ed 27 12 	      sbc	_drawrect.sx
      9  1010				  -	      IF	!FPUSH
     10  1010				  -	      pha
     11  1010					      ENDIF
   4047  1010				   FPULL      SET	1
   4048  1010				   FPUSH      SET	0
      0  1010					      plb2var	_drawrect.w
      1  1010				  -	      IF	!FPULL
      2  1010				  -	      pla
      3  1010					      ENDIF
      4  1010		       8d 2d 12 	      sta	_drawrect.w
   4050  1010				   FPULL      SET	0
   4051  1010				   FPUSH      SET	1
      0  1013					      opt_pbyte_pbyte_sub	_drawrect.ey, _drawrect.sy
      1  1013
      2  1013
      3  1013
      4  1013
      5  1013
      6  1013		       ad 2a 12 	      lda	_drawrect.ey
      7  1016		       38		      sec
      8  1017		       ed 28 12 	      sbc	_drawrect.sy
      9  101a				  -	      IF	!FPUSH
     10  101a				  -	      pha
     11  101a					      ENDIF
   4053  101a				   FPULL      SET	1
   4054  101a				   FPUSH      SET	0
      0  101a					      plb2var	_drawrect.h
      1  101a				  -	      IF	!FPULL
      2  101a				  -	      pla
      3  101a					      ENDIF
      4  101a		       8d 2e 12 	      sta	_drawrect.h
   4056  101a				   FPULL      SET	0
   4057  101a				   FPUSH      SET	1
      0  101d					      pbyte	#1
      1  101d		       a9 01		      lda	#1
      2  101f				  -	      IF	!FPUSH
      3  101f				  -	      pha
      4  101f					      ENDIF
   4059  101f				   FPULL      SET	1
   4060  101f				   FPUSH      SET	0
      0  101f					      plb2var	_drawrect.c
      1  101f				  -	      IF	!FPULL
      2  101f				  -	      pla
      3  101f					      ENDIF
      4  101f		       8d 2f 12 	      sta	_drawrect.c
   4062  101f				   FPULL      SET	0
   4063  101f				   FPUSH      SET	1
      0  1022					      opt_pbyte_pbyte_sub	_drawrect.w, #1
      1  1022
      2  1022
      3  1022
      4  1022
      5  1022
      6  1022		       ad 2d 12 	      lda	_drawrect.w
      7  1025		       38		      sec
      8  1026		       e9 01		      sbc	#1
      9  1028				  -	      IF	!FPUSH
     10  1028				  -	      pha
     11  1028					      ENDIF
   4065  1028				   FPULL      SET	1
   4066  1028				   FPUSH      SET	0
      0  1028					      plb2var	XFOR_max_4
      1  1028				  -	      IF	!FPULL
      2  1028				  -	      pla
      3  1028					      ENDIF
      4  1028		       8d 30 12 	      sta	XFOR_max_4
   4068  102b				   _FOR_4
   4069  102b				   FPULL      SET	0
      0  102b					      forb	4, _drawrect.c
      1  102b
      2  102b		       ad 30 12 	      lda	XFOR_max_4
      3  102e		       cd 2f 12 	      cmp	_drawrect.c
      4  1031		       b0 03		      bcs	.enter
      5  1033
      6  1033		       4c 4a 10 	      jmp	_ENDFOR_4
      7  1036				   .enter
      0  1036					      paddr	_S9
      0  1036					      pword	_S9
      1  1036					      IF	!FPUSH
      2  1036		       a9 c3		      lda	#<_S9
      3  1038		       48		      pha
      4  1039		       a9 11		      lda	#>_S9
      5  103b		       48		      pha
      6  103c				  -	      ELSE
      7  103c				  -	      lda	#<_S9
      8  103c				  -	      ldy	#>_S9
      9  103c					      ENDIF
      0  103c					      stdlib_putstr
      1  103c		       68		      pla
      2  103d		       a8		      tay
      3  103e		       68		      pla
      4  103f		       20 8c 09 	      jsr	STDLIB_PRINT
      0  1042					      nextb	4, _drawrect.c
      1  1042
      2  1042				  -	      IFCONST	XFOR_step_4
      3  1042				  -
      4  1042				  -	      clc
      5  1042				  -	      lda	XFOR_step_4
      6  1042				  -	      adc	_drawrect.c
      7  1042				  -	      sta	_drawrect.c
      8  1042				  -
      9  1042				  -	      bcs	_ENDFOR_4
     10  1042					      ELSE
     11  1042
     12  1042		       ee 2f 12 	      inc	_drawrect.c
     13  1045
     14  1045		       f0 03		      beq	_ENDFOR_4
     15  1047					      ENDIF
     16  1047		       4c 2b 10 	      jmp	_FOR_4
   4074  104a				   _ENDFOR_4
      0  104a					      opt_pbyte_pbyte_add	_drawrect.sy, #1
      1  104a
      2  104a
      3  104a
      4  104a
      5  104a
      6  104a		       ad 28 12 	      lda	_drawrect.sy
      7  104d		       18		      clc
      8  104e		       69 01		      adc	#1
      9  1050					      IF	!FPUSH
     10  1050		       48		      pha
     11  1051					      ENDIF
      0  1051					      pbvar	_drawrect.sx
      0  1051					      pbyte	_drawrect.sx
      1  1051		       ad 27 12 	      lda	_drawrect.sx
      2  1054					      IF	!FPUSH
      3  1054		       48		      pha
      4  1055					      ENDIF
      0  1055					      curpos
      1  1055		       68		      pla
      2  1056		       a8		      tay
      3  1057		       68		      pla
      4  1058		       aa		      tax
      5  1059		       18		      clc
      6  105a		       20 f0 ff 	      jsr	PLOT
   4078  105a				   FPUSH      SET	1
      0  105d					      pbyte	#0
      1  105d		       a9 00		      lda	#0
      2  105f				  -	      IF	!FPUSH
      3  105f				  -	      pha
      4  105f					      ENDIF
   4080  105f				   FPULL      SET	1
   4081  105f				   FPUSH      SET	0
      0  105f					      plb2var	_drawrect.r
      1  105f				  -	      IF	!FPULL
      2  105f				  -	      pla
      3  105f					      ENDIF
      4  105f		       8d 31 12 	      sta	_drawrect.r
   4083  105f				   FPULL      SET	0
   4084  105f				   FPUSH      SET	1
      0  1062					      opt_pbyte_pbyte_sub	_drawrect.h, #1
      1  1062
      2  1062
      3  1062
      4  1062
      5  1062
      6  1062		       ad 2e 12 	      lda	_drawrect.h
      7  1065		       38		      sec
      8  1066		       e9 01		      sbc	#1
      9  1068				  -	      IF	!FPUSH
     10  1068				  -	      pha
     11  1068					      ENDIF
   4086  1068				   FPULL      SET	1
   4087  1068				   FPUSH      SET	0
      0  1068					      plb2var	XFOR_max_5
      1  1068				  -	      IF	!FPULL
      2  1068				  -	      pla
      3  1068					      ENDIF
      4  1068		       8d 32 12 	      sta	XFOR_max_5
   4089  106b				   _FOR_5
   4090  106b				   FPULL      SET	0
      0  106b					      forb	5, _drawrect.r
      1  106b
      2  106b		       ad 32 12 	      lda	XFOR_max_5
      3  106e		       cd 31 12 	      cmp	_drawrect.r
      4  1071		       b0 03		      bcs	.enter
      5  1073
      6  1073		       4c d1 10 	      jmp	_ENDFOR_5
      7  1076				   .enter
      0  1076					      paddr	_S10
      0  1076					      pword	_S10
      1  1076					      IF	!FPUSH
      2  1076		       a9 c5		      lda	#<_S10
      3  1078		       48		      pha
      4  1079		       a9 11		      lda	#>_S10
      5  107b		       48		      pha
      6  107c				  -	      ELSE
      7  107c				  -	      lda	#<_S10
      8  107c				  -	      ldy	#>_S10
      9  107c					      ENDIF
      0  107c					      stdlib_putstr
      1  107c		       68		      pla
      2  107d		       a8		      tay
      3  107e		       68		      pla
      4  107f		       20 8c 09 	      jsr	STDLIB_PRINT
      0  1082					      opt_pbyte_pbyte_add	_drawrect.sy, _drawrect.r
      1  1082
      2  1082
      3  1082
      4  1082
      5  1082
      6  1082		       ad 28 12 	      lda	_drawrect.sy
      7  1085		       18		      clc
      8  1086		       6d 31 12 	      adc	_drawrect.r
      9  1089					      IF	!FPUSH
     10  1089		       48		      pha
     11  108a					      ENDIF
      0  108a					      opt_pbyte_pbyte_add	_drawrect.sx, _drawrect.w
      1  108a
      2  108a
      3  108a
      4  108a
      5  108a
      6  108a		       ad 27 12 	      lda	_drawrect.sx
      7  108d		       18		      clc
      8  108e		       6d 2d 12 	      adc	_drawrect.w
      9  1091					      IF	!FPUSH
     10  1091		       48		      pha
     11  1092					      ENDIF
      0  1092					      pbyte	#1
      1  1092		       a9 01		      lda	#1
      2  1094					      IF	!FPUSH
      3  1094		       48		      pha
      4  1095					      ENDIF
      0  1095					      subb
      1  1095		       ba		      tsx
      2  1096		       bd 02 01 	      lda.wx	stack+2
      3  1099		       38		      sec
      4  109a		       fd 01 01 	      sbc.wx	stack+1
      5  109d		       9d 02 01 	      sta.wx	stack+2
      6  10a0		       68		      pla
      0  10a1					      curpos
      1  10a1		       68		      pla
      2  10a2		       a8		      tay
      3  10a3		       68		      pla
      4  10a4		       aa		      tax
      5  10a5		       18		      clc
      6  10a6		       20 f0 ff 	      jsr	PLOT
      0  10a9					      paddr	_S11
      0  10a9					      pword	_S11
      1  10a9					      IF	!FPUSH
      2  10a9		       a9 c7		      lda	#<_S11
      3  10ab		       48		      pha
      4  10ac		       a9 11		      lda	#>_S11
      5  10ae		       48		      pha
      6  10af				  -	      ELSE
      7  10af				  -	      lda	#<_S11
      8  10af				  -	      ldy	#>_S11
      9  10af					      ENDIF
      0  10af					      stdlib_putstr
      1  10af		       68		      pla
      2  10b0		       a8		      tay
      3  10b1		       68		      pla
      4  10b2		       20 8c 09 	      jsr	STDLIB_PRINT
      0  10b5					      opt_pbyte_pbyte_add	_drawrect.sy, _drawrect.r
      1  10b5
      2  10b5
      3  10b5
      4  10b5
      5  10b5
      6  10b5		       ad 28 12 	      lda	_drawrect.sy
      7  10b8		       18		      clc
      8  10b9		       6d 31 12 	      adc	_drawrect.r
      9  10bc					      IF	!FPUSH
     10  10bc		       48		      pha
     11  10bd					      ENDIF
      0  10bd					      pbvar	_drawrect.sx
      0  10bd					      pbyte	_drawrect.sx
      1  10bd		       ad 27 12 	      lda	_drawrect.sx
      2  10c0					      IF	!FPUSH
      3  10c0		       48		      pha
      4  10c1					      ENDIF
      0  10c1					      curpos
      1  10c1		       68		      pla
      2  10c2		       a8		      tay
      3  10c3		       68		      pla
      4  10c4		       aa		      tax
      5  10c5		       18		      clc
      6  10c6		       20 f0 ff 	      jsr	PLOT
      0  10c9					      nextb	5, _drawrect.r
      1  10c9
      2  10c9				  -	      IFCONST	XFOR_step_5
      3  10c9				  -
      4  10c9				  -	      clc
      5  10c9				  -	      lda	XFOR_step_5
      6  10c9				  -	      adc	_drawrect.r
      7  10c9				  -	      sta	_drawrect.r
      8  10c9				  -
      9  10c9				  -	      bcs	_ENDFOR_5
     10  10c9					      ELSE
     11  10c9
     12  10c9		       ee 31 12 	      inc	_drawrect.r
     13  10cc
     14  10cc		       f0 03		      beq	_ENDFOR_5
     15  10ce					      ENDIF
     16  10ce		       4c 6b 10 	      jmp	_FOR_5
   4105  10d1				   _ENDFOR_5
      0  10d1					      opt_pbyte_pbyte_sub	_drawrect.ey, #1
      1  10d1
      2  10d1
      3  10d1
      4  10d1
      5  10d1
      6  10d1		       ad 2a 12 	      lda	_drawrect.ey
      7  10d4		       38		      sec
      8  10d5		       e9 01		      sbc	#1
      9  10d7					      IF	!FPUSH
     10  10d7		       48		      pha
     11  10d8					      ENDIF
      0  10d8					      pbvar	_drawrect.sx
      0  10d8					      pbyte	_drawrect.sx
      1  10d8		       ad 27 12 	      lda	_drawrect.sx
      2  10db					      IF	!FPUSH
      3  10db		       48		      pha
      4  10dc					      ENDIF
      0  10dc					      curpos
      1  10dc		       68		      pla
      2  10dd		       a8		      tay
      3  10de		       68		      pla
      4  10df		       aa		      tax
      5  10e0		       18		      clc
      6  10e1		       20 f0 ff 	      jsr	PLOT
   4109  10e1				   FPUSH      SET	1
      0  10e4					      pbyte	#1
      1  10e4		       a9 01		      lda	#1
      2  10e6				  -	      IF	!FPUSH
      3  10e6				  -	      pha
      4  10e6					      ENDIF
   4111  10e6				   FPULL      SET	1
   4112  10e6				   FPUSH      SET	0
      0  10e6					      plb2var	_drawrect.c
      1  10e6				  -	      IF	!FPULL
      2  10e6				  -	      pla
      3  10e6					      ENDIF
      4  10e6		       8d 2f 12 	      sta	_drawrect.c
   4114  10e6				   FPULL      SET	0
   4115  10e6				   FPUSH      SET	1
      0  10e9					      opt_pbyte_pbyte_sub	_drawrect.w, #1
      1  10e9
      2  10e9
      3  10e9
      4  10e9
      5  10e9
      6  10e9		       ad 2d 12 	      lda	_drawrect.w
      7  10ec		       38		      sec
      8  10ed		       e9 01		      sbc	#1
      9  10ef				  -	      IF	!FPUSH
     10  10ef				  -	      pha
     11  10ef					      ENDIF
   4117  10ef				   FPULL      SET	1
   4118  10ef				   FPUSH      SET	0
      0  10ef					      plb2var	XFOR_max_6
      1  10ef				  -	      IF	!FPULL
      2  10ef				  -	      pla
      3  10ef					      ENDIF
      4  10ef		       8d 33 12 	      sta	XFOR_max_6
   4120  10f2				   _FOR_6
   4121  10f2				   FPULL      SET	0
      0  10f2					      forb	6, _drawrect.c
      1  10f2
      2  10f2		       ad 33 12 	      lda	XFOR_max_6
      3  10f5		       cd 2f 12 	      cmp	_drawrect.c
      4  10f8		       b0 03		      bcs	.enter
      5  10fa
      6  10fa		       4c 11 11 	      jmp	_ENDFOR_6
      7  10fd				   .enter
      0  10fd					      paddr	_S12
      0  10fd					      pword	_S12
      1  10fd					      IF	!FPUSH
      2  10fd		       a9 c9		      lda	#<_S12
      3  10ff		       48		      pha
      4  1100		       a9 11		      lda	#>_S12
      5  1102		       48		      pha
      6  1103				  -	      ELSE
      7  1103				  -	      lda	#<_S12
      8  1103				  -	      ldy	#>_S12
      9  1103					      ENDIF
      0  1103					      stdlib_putstr
      1  1103		       68		      pla
      2  1104		       a8		      tay
      3  1105		       68		      pla
      4  1106		       20 8c 09 	      jsr	STDLIB_PRINT
      0  1109					      nextb	6, _drawrect.c
      1  1109
      2  1109				  -	      IFCONST	XFOR_step_6
      3  1109				  -
      4  1109				  -	      clc
      5  1109				  -	      lda	XFOR_step_6
      6  1109				  -	      adc	_drawrect.c
      7  1109				  -	      sta	_drawrect.c
      8  1109				  -
      9  1109				  -	      bcs	_ENDFOR_6
     10  1109					      ELSE
     11  1109
     12  1109		       ee 2f 12 	      inc	_drawrect.c
     13  110c
     14  110c		       f0 03		      beq	_ENDFOR_6
     15  110e					      ENDIF
     16  110e		       4c f2 10 	      jmp	_FOR_6
   4126  1111				   _ENDFOR_6
      0  1111					      paddr	_S13
      0  1111					      pword	_S13
      1  1111					      IF	!FPUSH
      2  1111		       a9 cb		      lda	#<_S13
      3  1113		       48		      pha
      4  1114		       a9 11		      lda	#>_S13
      5  1116		       48		      pha
      6  1117				  -	      ELSE
      7  1117				  -	      lda	#<_S13
      8  1117				  -	      ldy	#>_S13
      9  1117					      ENDIF
      0  1117					      stdlib_putstr
      1  1117		       68		      pla
      2  1118		       a8		      tay
      3  1119		       68		      pla
      4  111a		       20 8c 09 	      jsr	STDLIB_PRINT
   4129  111d		       60		      rts
   4130  111e				   _Pdrawrect_end
   4131  111e
   4132  111e				   _Pget_key  SUBROUTINE
      0  111e					      paddr	_S14
      0  111e					      pword	_S14
      1  111e					      IF	!FPUSH
      2  111e		       a9 cd		      lda	#<_S14
      3  1120		       48		      pha
      4  1121		       a9 11		      lda	#>_S14
      5  1123		       48		      pha
      6  1124				  -	      ELSE
      7  1124				  -	      lda	#<_S14
      8  1124				  -	      ldy	#>_S14
      9  1124					      ENDIF
      0  1124					      stdlib_putstr
      1  1124		       68		      pla
      2  1125		       a8		      tay
      3  1126		       68		      pla
      4  1127		       20 8c 09 	      jsr	STDLIB_PRINT
   4135  112a		       a9 0d		      lda	#13
   4136  112c		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   4137  112f				   _Lget_key.loop
   4138  112f				   FPUSH      SET	1
      0  112f					      inkeyb
      1  112f		       20 e4 ff 	      jsr	KERNAL_GETIN
      2  1132				  -	      IF	!FPUSH
      3  1132				  -	      pha
      4  1132					      ENDIF
   4140  1132				   FPULL      SET	1
   4141  1132				   FPUSH      SET	0
      0  1132					      plb2var	_get_key.key
      1  1132				  -	      IF	!FPULL
      2  1132				  -	      pla
      3  1132					      ENDIF
      4  1132		       8d 34 12 	      sta	_get_key.key
   4143  1132				   FPULL      SET	0
      0  1135					      pbyte_pbyte_cmpbeq_cond	_get_key.key, #0, _EI_65536, _EL_65536
      1  1135
      2  1135
      3  1135		       ad 34 12 	      lda	_get_key.key
      4  1138		       c9 00		      cmp	#0
      5  113a		       f0 03		      beq	*+5
      6  113c				  -	      IFCONST	_EL_65536
      7  113c				  -	      jmp	_EL_65536
      8  113c					      ELSE
      9  113c		       4c 42 11 	      jmp	_EI_65536
     10  113f					      ENDIF
   4145  113f		       4c 2f 11 	      jmp	_Lget_key.loop
   4146  1142
   4147  1142				   _EI_65536
      0  1142					      pbyte_pbyte_cmpbeq_cond	_get_key.key, #145, _EI_65537, _EL_65537
      1  1142
      2  1142
      3  1142		       ad 34 12 	      lda	_get_key.key
      4  1145		       c9 91		      cmp	#145
      5  1147		       f0 03		      beq	*+5
      6  1149				  -	      IFCONST	_EL_65537
      7  1149				  -	      jmp	_EL_65537
      8  1149					      ELSE
      9  1149		       4c 5d 11 	      jmp	_EI_65537
     10  114c					      ENDIF
      0  114c					      paddr	_S15
      0  114c					      pword	_S15
      1  114c					      IF	!FPUSH
      2  114c		       a9 d9		      lda	#<_S15
      3  114e		       48		      pha
      4  114f		       a9 11		      lda	#>_S15
      5  1151		       48		      pha
      6  1152				  -	      ELSE
      7  1152				  -	      lda	#<_S15
      8  1152				  -	      ldy	#>_S15
      9  1152					      ENDIF
      0  1152					      stdlib_putstr
      1  1152		       68		      pla
      2  1153		       a8		      tay
      3  1154		       68		      pla
      4  1155		       20 8c 09 	      jsr	STDLIB_PRINT
   4151  1158		       a9 0d		      lda	#13
   4152  115a		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   4153  115d				   _EI_65537
      0  115d					      pbyte_pbyte_cmpbeq_cond	_get_key.key, #17, _EI_65538, _EL_65538
      1  115d
      2  115d
      3  115d		       ad 34 12 	      lda	_get_key.key
      4  1160		       c9 11		      cmp	#17
      5  1162		       f0 03		      beq	*+5
      6  1164				  -	      IFCONST	_EL_65538
      7  1164				  -	      jmp	_EL_65538
      8  1164					      ELSE
      9  1164		       4c 78 11 	      jmp	_EI_65538
     10  1167					      ENDIF
      0  1167					      paddr	_S16
      0  1167					      pword	_S16
      1  1167					      IF	!FPUSH
      2  1167		       a9 dc		      lda	#<_S16
      3  1169		       48		      pha
      4  116a		       a9 11		      lda	#>_S16
      5  116c		       48		      pha
      6  116d				  -	      ELSE
      7  116d				  -	      lda	#<_S16
      8  116d				  -	      ldy	#>_S16
      9  116d					      ENDIF
      0  116d					      stdlib_putstr
      1  116d		       68		      pla
      2  116e		       a8		      tay
      3  116f		       68		      pla
      4  1170		       20 8c 09 	      jsr	STDLIB_PRINT
   4157  1173		       a9 0d		      lda	#13
   4158  1175		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   4159  1178				   _EI_65538
      0  1178					      pbyte_pbyte_cmpbeq_cond	_get_key.key, #29, _EI_65539, _EL_65539
      1  1178
      2  1178
      3  1178		       ad 34 12 	      lda	_get_key.key
      4  117b		       c9 1d		      cmp	#29
      5  117d		       f0 03		      beq	*+5
      6  117f				  -	      IFCONST	_EL_65539
      7  117f				  -	      jmp	_EL_65539
      8  117f					      ELSE
      9  117f		       4c 93 11 	      jmp	_EI_65539
     10  1182					      ENDIF
      0  1182					      paddr	_S17
      0  1182					      pword	_S17
      1  1182					      IF	!FPUSH
      2  1182		       a9 e1		      lda	#<_S17
      3  1184		       48		      pha
      4  1185		       a9 11		      lda	#>_S17
      5  1187		       48		      pha
      6  1188				  -	      ELSE
      7  1188				  -	      lda	#<_S17
      8  1188				  -	      ldy	#>_S17
      9  1188					      ENDIF
      0  1188					      stdlib_putstr
      1  1188		       68		      pla
      2  1189		       a8		      tay
      3  118a		       68		      pla
      4  118b		       20 8c 09 	      jsr	STDLIB_PRINT
   4163  118e		       a9 0d		      lda	#13
   4164  1190		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   4165  1193				   _EI_65539
      0  1193					      pbyte_pbyte_cmpbeq_cond	_get_key.key, #157, _EI_65540, _EL_65540
      1  1193
      2  1193
      3  1193		       ad 34 12 	      lda	_get_key.key
      4  1196		       c9 9d		      cmp	#157
      5  1198		       f0 03		      beq	*+5
      6  119a				  -	      IFCONST	_EL_65540
      7  119a				  -	      jmp	_EL_65540
      8  119a					      ELSE
      9  119a		       4c ae 11 	      jmp	_EI_65540
     10  119d					      ENDIF
      0  119d					      paddr	_S18
      0  119d					      pword	_S18
      1  119d					      IF	!FPUSH
      2  119d		       a9 e6		      lda	#<_S18
      3  119f		       48		      pha
      4  11a0		       a9 11		      lda	#>_S18
      5  11a2		       48		      pha
      6  11a3				  -	      ELSE
      7  11a3				  -	      lda	#<_S18
      8  11a3				  -	      ldy	#>_S18
      9  11a3					      ENDIF
      0  11a3					      stdlib_putstr
      1  11a3		       68		      pla
      2  11a4		       a8		      tay
      3  11a5		       68		      pla
      4  11a6		       20 8c 09 	      jsr	STDLIB_PRINT
   4169  11a9		       a9 0d		      lda	#13
   4170  11ab		       20 16 e7 	      jsr	KERNAL_PRINTCHR
   4171  11ae				   _EI_65540
   4172  11ae		       4c 2f 11 	      jmp	_Lget_key.loop
   4173  11b1		       60		      rts
   4174  11b2
   4175  11b2				   _Pget_key_end
   4176  11b2
   4177  11b2
   4178  11b2
   4179  11b2
   4180  11b2				   FPUSH      SET	0
   4181  11b2				   FPULL      SET	0
 Code        : $d68 - $11b1
   4182  11b2					      ECHO	"Code	      :",prg_start,"-", *-1
   4183  11b2				   data_start
   4184  11b2		       13 93 00    _S1	      HEX	13 93 00
   4185  11b5		       12 00	   _S2	      HEX	12 00
   4186  11b7		       20 00	   _S3	      HEX	20 00
   4187  11b9		       92 00	   _S4	      HEX	92 00
   4188  11bb		       12 00	   _S5	      HEX	12 00
   4189  11bd		       20 00	   _S6	      HEX	20 00
   4190  11bf		       92 00	   _S7	      HEX	92 00
   4191  11c1		       12 00	   _S8	      HEX	12 00
   4192  11c3		       20 00	   _S9	      HEX	20 00
   4193  11c5		       20 00	   _S10       HEX	20 00
   4194  11c7		       20 00	   _S11       HEX	20 00
   4195  11c9		       20 00	   _S12       HEX	20 00
   4196  11cb		       92 00	   _S13       HEX	92 00
   4197  11cd		       50 52 45 53*_S14       HEX	50 52 45 53 53 20 41 20 4B 45 59 00
   4198  11d9		       55 50 00    _S15       HEX	55 50 00
   4199  11dc		       44 4f 57 4e*_S16       HEX	44 4F 57 4E 00
   4200  11e1		       4c 45 46 54*_S17       HEX	4C 45 46 54 00
   4201  11e6		       52 49 47 48*_S18       HEX	52 49 47 48 54 00
   4202  11ec		       05 00	   _S19       HEX	05 00
   4203  11ee		       12 48 45 4c*_S20       HEX	12 48 45 4C 4C 4F 20 57 4F 52 4C 44 92 00
   4204  11fc		       05 00	   _S21       HEX	05 00
   4205  11fe		       9a 00	   _S22       HEX	9A 00
   4206  1200		       90 00	   _S23       HEX	90 00
   4207  1202		       05 00	   _S24       HEX	05 00
   4208  1204		       4d 45 4e 55*_S25       HEX	4D 45 4E 55 00
   4209  1209		       2d 2d 2d 2d*_S26       HEX	2D 2D 2D 2D 00
   4210  120e		       43 48 4f 49*_S27       HEX	43 48 4F 49 43 45 00
   4211  1215				   data_end
 Data        : $11b2 - $1214
   4212  1215					      ECHO	"Data	      :",data_start,"-", *-1
   4213  1215							;--------------
   4214 U124c ????				      SEG.U	variables
   4215 U1216					      ORG	data_end+1
   4216 U1216		       00	   _drawbar.y DS.B	1
   4217 U1217		       00 00	   _drawbar.color DS.B	2
   4218 U1219		       00	   _drawbar.i DS.B	1
   4219 U121a		       00	   XFOR_max_1 DS.B	1
   4220 U121b		       00	   _drawbox.sx DS.B	1
   4221 U121c		       00	   _drawbox.sy DS.B	1
   4222 U121d		       00	   _drawbox.ex DS.B	1
   4223 U121e		       00	   _drawbox.ey DS.B	1
   4224 U121f		       00 00	   _drawbox.color DS.B	2
   4225 U1221		       00	   _drawbox.w DS.B	1
   4226 U1222		       00	   _drawbox.h DS.B	1
   4227 U1223		       00	   _drawbox.r DS.B	1
   4228 U1224		       00	   XFOR_max_2 DS.B	1
   4229 U1225		       00	   _drawbox.c DS.B	1
   4230 U1226		       00	   XFOR_max_3 DS.B	1
   4231 U1227		       00	   _drawrect.sx DS.B	1
   4232 U1228		       00	   _drawrect.sy DS.B	1
   4233 U1229		       00	   _drawrect.ex DS.B	1
   4234 U122a		       00	   _drawrect.ey DS.B	1
   4235 U122b		       00 00	   _drawrect.color DS.B	2
   4236 U122d		       00	   _drawrect.w DS.B	1
   4237 U122e		       00	   _drawrect.h DS.B	1
   4238 U122f		       00	   _drawrect.c DS.B	1
   4239 U1230		       00	   XFOR_max_4 DS.B	1
   4240 U1231		       00	   _drawrect.r DS.B	1
   4241 U1232		       00	   XFOR_max_5 DS.B	1
   4242 U1233		       00	   XFOR_max_6 DS.B	1
   4243 U1234		       00	   _get_key.key DS.B	1
   4244 U1235		       00 00 00 00*_buff      DS.B	21
   4245 U124a		       00 00	   _name      DS.B	2
 Variables*  : $1215 - $124c
   4246 U124a					      ECHO	"Variables*  :",data_end,"-", *
 ===================
   4247 U124a					      ECHO	"==================="
 *: uninitialized segment
   4248 U124a					      ECHO	"*: uninitialized segment"
